From c4fbdeccdbf7c107683a712cd9c24951f2c350fe Mon Sep 17 00:00:00 2001
From: Roman Shaposhnik <rvs@cloudera.com>
Date: Fri, 30 Sep 2011 15:41:02 -0700
Subject: [PATCH 033/101] HBASE-4209 The HBase hbase-daemon.sh SIGKILLs master when stopping it

Reason: Bug
Author: Roman Shaposhnik
Ref: DISTRO-119
---
 bin/hbase-daemon.sh                                |    9 +----
 .../org/apache/hadoop/hbase/LocalHBaseCluster.java |    2 +-
 .../hadoop/hbase/regionserver/ShutdownHook.java    |   36 ++++++++++++++++----
 .../apache/hadoop/hbase/util/JVMClusterUtil.java   |    7 +++-
 4 files changed, 38 insertions(+), 16 deletions(-)

diff --git a/bin/hbase-daemon.sh b/bin/hbase-daemon.sh
index 2979243..8b06b40 100755
--- a/bin/hbase-daemon.sh
+++ b/bin/hbase-daemon.sh
@@ -153,13 +153,8 @@ case $startStop in
       # kill -0 == see if the PID exists 
       if kill -0 `cat $pid` > /dev/null 2>&1; then
         echo -n stopping $command
-        if [ "$command" = "master" ]; then
-          echo "`date` Killing $command" >> $loglog
-          kill -9 `cat $pid` > /dev/null 2>&1
-        else
-          echo "`date` Killing $command" >> $loglog
-          kill `cat $pid` > /dev/null 2>&1
-        fi
+        echo "`date` Killing $command" >> $loglog
+        kill `cat $pid` > /dev/null 2>&1
         while kill -0 `cat $pid` > /dev/null 2>&1; do
           echo -n "."
           sleep 1;
diff --git a/src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java b/src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java
index 0d696ab..9709070 100644
--- a/src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java
+++ b/src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java
@@ -416,7 +416,7 @@ public class LocalHBaseCluster {
   /**
    * Start the cluster.
    */
-  public void startup() {
+  public void startup() throws IOException {
     JVMClusterUtil.startup(this.masterThreads, this.regionThreads);
   }
 
diff --git a/src/main/java/org/apache/hadoop/hbase/regionserver/ShutdownHook.java b/src/main/java/org/apache/hadoop/hbase/regionserver/ShutdownHook.java
index b25e575..b0fc8b4 100644
--- a/src/main/java/org/apache/hadoop/hbase/regionserver/ShutdownHook.java
+++ b/src/main/java/org/apache/hadoop/hbase/regionserver/ShutdownHook.java
@@ -21,6 +21,8 @@ package org.apache.hadoop.hbase.regionserver;
 
 import java.io.IOException;
 import java.lang.reflect.Field;
+import java.util.HashMap;
+import java.util.Map;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -34,7 +36,7 @@ import org.apache.hadoop.hbase.util.Threads;
  * Manage regionserver shutdown hooks.
  * @see #install(Configuration, FileSystem, Stoppable, Thread)
  */
-class ShutdownHook {
+public class ShutdownHook {
   private static final Log LOG = LogFactory.getLog(ShutdownHook.class);
   private static final String CLIENT_FINALIZER_DATA_METHOD = "clientFinalizer";
 
@@ -50,6 +52,13 @@ class ShutdownHook {
   public static final String FS_SHUTDOWN_HOOK_WAIT = "hbase.fs.shutdown.hook.wait";
 
   /**
+   * A place for keeping track of all the filesystem shutdown hooks that need
+   * to be executed after the last regionserver referring to a given filesystem
+   * stops. We keep track of the # of regionserver references in values of the map.
+   */
+  private final static Map<Thread, Integer> fsShutdownHooks = new HashMap<Thread, Integer>();
+
+  /**
    * Install a shutdown hook that calls stop on the passed Stoppable
    * and then thread joins against the passed <code>threadToJoin</code>.
    * When this thread completes, it then runs the hdfs thread (This install
@@ -68,7 +77,7 @@ class ShutdownHook {
    * @param threadToJoin After calling stop on <code>stop</code> will then
    * join this thread.
    */
-  static void install(final Configuration conf, final FileSystem fs,
+  public static void install(final Configuration conf, final FileSystem fs,
       final Stoppable stop, final Thread threadToJoin) {
     Thread fsShutdownHook = suppressHdfsShutdownHook(fs);
     Thread t = new ShutdownHookThread(conf, stop, threadToJoin, fsShutdownHook);
@@ -103,10 +112,18 @@ class ShutdownHook {
         this.stop.stop("Shutdown hook");
         Threads.shutdown(this.threadToJoin);
         if (this.fsShutdownHook != null) {
-          LOG.info("Starting fs shutdown hook thread.");
-          this.fsShutdownHook.start();
-          Threads.shutdown(this.fsShutdownHook,
-            this.conf.getLong(FS_SHUTDOWN_HOOK_WAIT, 30000));
+          synchronized (fsShutdownHooks) {
+            int refs = fsShutdownHooks.get(fsShutdownHook);
+            if (refs == 1) {
+              LOG.info("Starting fs shutdown hook thread.");
+              this.fsShutdownHook.start();
+              Threads.shutdown(this.fsShutdownHook,
+              this.conf.getLong(FS_SHUTDOWN_HOOK_WAIT, 30000));
+            }
+            if (refs > 0) {
+              fsShutdownHooks.put(fsShutdownHook, refs - 1);
+            }
+          }
         }
       }
       LOG.info("Shutdown hook finished.");
@@ -171,10 +188,15 @@ class ShutdownHook {
       if (hdfsClientFinalizer == null) {
         throw new RuntimeException("Client finalizer is null, can't suppress!");
       }
-      if (!Runtime.getRuntime().removeShutdownHook(hdfsClientFinalizer)) {
+      if (!fsShutdownHooks.containsKey(hdfsClientFinalizer) &&
+          !Runtime.getRuntime().removeShutdownHook(hdfsClientFinalizer)) {
         throw new RuntimeException("Failed suppression of fs shutdown hook: " +
           hdfsClientFinalizer);
       }
+      synchronized (fsShutdownHooks) {
+        Integer refs = fsShutdownHooks.get(hdfsClientFinalizer);
+        fsShutdownHooks.put(hdfsClientFinalizer, refs == null ? 1 : refs + 1);
+      }
       return hdfsClientFinalizer;
     } catch (NoSuchFieldException nsfe) {
       LOG.fatal("Couldn't find field 'clientFinalizer' in FileSystem!", nsfe);
diff --git a/src/main/java/org/apache/hadoop/hbase/util/JVMClusterUtil.java b/src/main/java/org/apache/hadoop/hbase/util/JVMClusterUtil.java
index 8437e08..bb198ce 100644
--- a/src/main/java/org/apache/hadoop/hbase/util/JVMClusterUtil.java
+++ b/src/main/java/org/apache/hadoop/hbase/util/JVMClusterUtil.java
@@ -26,8 +26,10 @@ import java.util.List;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.hbase.master.HMaster;
 import org.apache.hadoop.hbase.regionserver.HRegionServer;
+import org.apache.hadoop.hbase.regionserver.ShutdownHook;
 
 /**
  * Utility used running a cluster all in the one JVM.
@@ -171,7 +173,7 @@ public class JVMClusterUtil {
    * @return Address to use contacting primary master.
    */
   public static String startup(final List<JVMClusterUtil.MasterThread> masters,
-      final List<JVMClusterUtil.RegionServerThread> regionservers) {
+      final List<JVMClusterUtil.RegionServerThread> regionservers) throws IOException {
     if (masters != null) {
       for (JVMClusterUtil.MasterThread t : masters) {
         t.start();
@@ -179,6 +181,9 @@ public class JVMClusterUtil {
     }
     if (regionservers != null) {
       for (JVMClusterUtil.RegionServerThread t: regionservers) {
+        HRegionServer hrs = t.getRegionServer();
+        ShutdownHook.install(hrs.getConfiguration(), FileSystem.get(hrs
+                .getConfiguration()), hrs, t);
         t.start();
       }
     }
-- 
1.7.0.4


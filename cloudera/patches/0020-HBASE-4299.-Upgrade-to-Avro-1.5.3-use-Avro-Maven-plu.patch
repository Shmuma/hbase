From 9c63b726d986ee34a5a8b273d4bef85cb4757074 Mon Sep 17 00:00:00 2001
From: Jimmy Xiang <jxiang@cloudera.com>
Date: Wed, 21 Mar 2012 13:47:42 -0700
Subject: [PATCH 020/101] HBASE-4299. Upgrade to Avro 1.5.3 & use Avro Maven plugin to generate Avro classes

  Reason: Improvement
  Author: Alejandro Abdelnur
  Ref: CDH-3534
---
 pom.xml                                            |   63 ++-
 src/main/avro/hbase.avpr                           |  609 ++++++++++++++++++++
 .../org/apache/hadoop/hbase/avro/AvroServer.java   |    2 +-
 .../hbase/avro/generated/AAlreadyExists.java       |   21 -
 .../hbase/avro/generated/AClusterStatus.java       |   49 --
 .../hadoop/hbase/avro/generated/AColumn.java       |   31 -
 .../avro/generated/AColumnFamilyDescriptor.java    |   42 --
 .../hadoop/hbase/avro/generated/AColumnValue.java  |   37 --
 .../avro/generated/ACompressionAlgorithm.java      |   11 -
 .../hadoop/hbase/avro/generated/ADelete.java       |   31 -
 .../hbase/avro/generated/AFamilyDescriptor.java    |   46 --
 .../apache/hadoop/hbase/avro/generated/AGet.java   |   40 --
 .../hadoop/hbase/avro/generated/AIOError.java      |   28 -
 .../hbase/avro/generated/AIllegalArgument.java     |   28 -
 .../hbase/avro/generated/AMasterNotRunning.java    |   28 -
 .../apache/hadoop/hbase/avro/generated/APut.java   |   31 -
 .../hadoop/hbase/avro/generated/ARegionLoad.java   |   43 --
 .../hadoop/hbase/avro/generated/AResult.java       |   31 -
 .../hadoop/hbase/avro/generated/AResultEntry.java  |   37 --
 .../apache/hadoop/hbase/avro/generated/AScan.java  |   43 --
 .../hbase/avro/generated/AServerAddress.java       |   34 --
 .../hadoop/hbase/avro/generated/AServerInfo.java   |   40 --
 .../hadoop/hbase/avro/generated/AServerLoad.java   |   55 --
 .../hbase/avro/generated/ATableDescriptor.java     |   52 --
 .../hadoop/hbase/avro/generated/ATableExists.java  |   28 -
 .../hadoop/hbase/avro/generated/ATimeRange.java    |   31 -
 .../apache/hadoop/hbase/avro/generated/HBase.java  |   36 --
 .../hadoop/hbase/avro/generated/IOError.java       |   21 -
 .../apache/hadoop/hbase/avro/generated/TCell.java  |   24 -
 .../java/org/apache/hadoop/hbase/avro/hbase.avpr   |  609 --------------------
 30 files changed, 652 insertions(+), 1529 deletions(-)
 create mode 100644 src/main/avro/hbase.avpr
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AAlreadyExists.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AClusterStatus.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AColumn.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AColumnFamilyDescriptor.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AColumnValue.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/ACompressionAlgorithm.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/ADelete.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AFamilyDescriptor.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AGet.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AIOError.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AIllegalArgument.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AMasterNotRunning.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/APut.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/ARegionLoad.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AResult.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AResultEntry.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AScan.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AServerAddress.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AServerInfo.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/AServerLoad.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/ATableDescriptor.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/ATableExists.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/ATimeRange.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/HBase.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/IOError.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/generated/TCell.java
 delete mode 100644 src/main/java/org/apache/hadoop/hbase/avro/hbase.avpr

diff --git a/pom.xml b/pom.xml
index 84e8b00..52c5a2a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -237,8 +237,8 @@
             </filesets>
           </configuration>
         </plugin>
-	<plugin> <!-- in plugin management section so excludes can be inherited -->
-	  <groupId>org.apache.rat</groupId>
+        <plugin> <!-- in plugin management section so excludes can be inherited -->
+        <groupId>org.apache.rat</groupId>
           <artifactId>apache-rat-plugin</artifactId>	  
           <version>0.8</version>
           <configuration>
@@ -254,13 +254,23 @@
               <exclude>**/*.vm</exclude> <!-- apache doxia generated -->
               <exclude>**/control</exclude>
               <exclude>**/conffile</exclude>
-	      <exclude>docs/*</exclude> <!-- auto-gen docs -->
+              <exclude>docs/*</exclude> <!-- auto-gen docs -->
               <!--It don't like freebsd license-->
               <exclude>**/src/site/resources/css/freebsd_docbook.css</exclude>
             </excludes>
           </configuration>
-	</plugin>
+        </plugin>
 
+        <plugin>
+          <groupId>org.apache.avro</groupId>
+          <artifactId>avro-maven-plugin</artifactId>
+          <version>${avro.version}</version>
+        </plugin>
+        <plugin>
+          <groupId>org.codehaus.mojo</groupId>
+          <artifactId>build-helper-maven-plugin</artifactId>
+          <version>1.5</version>
+        </plugin>
       </plugins>
     </pluginManagement>
 
@@ -281,6 +291,23 @@
 
     <plugins>
       <plugin>
+        <groupId>org.apache.avro</groupId>
+        <artifactId>avro-maven-plugin</artifactId>
+        <executions>
+          <execution>
+            <id>generate-avro-sources</id>
+            <phase>generate-sources</phase>
+            <goals>
+              <goal>schema</goal>
+              <goal>protocol</goal>
+            </goals>
+          </execution>
+        </executions>
+        <configuration>
+          <outputDirectory>${project.build.directory}/generated-sources/java</outputDirectory>
+        </configuration>
+      </plugin>
+      <plugin>
         <groupId>org.codehaus.mojo</groupId>
         <artifactId>xml-maven-plugin</artifactId>
         <version>1.0-beta-3</version>
@@ -442,13 +469,13 @@
                 <taskdef classname="org.apache.jasper.JspC" name="jspcompiler" classpathref="maven.compile.classpath" />
 
                 <mkdir dir="${build.webapps}/master/WEB-INF" />
-                <jspcompiler uriroot="${src.webapps}/master" outputdir="${generated.sources}" package="org.apache.hadoop.hbase.generated.master" webxml="${build.webapps}/master/WEB-INF/web.xml" />
+                <jspcompiler uriroot="${src.webapps}/master" outputdir="${generated.sources}/java" package="org.apache.hadoop.hbase.generated.master" webxml="${build.webapps}/master/WEB-INF/web.xml" />
 
                 <mkdir dir="${build.webapps}/regionserver/WEB-INF" />
-                <jspcompiler uriroot="${src.webapps}/regionserver" outputdir="${generated.sources}" package="org.apache.hadoop.hbase.generated.regionserver" webxml="${build.webapps}/regionserver/WEB-INF/web.xml" />
+                <jspcompiler uriroot="${src.webapps}/regionserver" outputdir="${generated.sources}/java" package="org.apache.hadoop.hbase.generated.regionserver" webxml="${build.webapps}/regionserver/WEB-INF/web.xml" />
 
                 <exec executable="sh">
-                  <arg line="${basedir}/src/saveVersion.sh ${project.version} ${generated.sources}" />
+                  <arg line="${basedir}/src/saveVersion.sh ${project.version} ${generated.sources}/java" />
                 </exec>
               </tasks>
             </configuration>
@@ -514,7 +541,7 @@
         <version>1.5</version>
         <executions>
           <execution>
-            <id>add-jspc-source</id>
+            <id>jspcSource-packageInfo-Avro-source</id>
             <phase>generate-sources</phase>
             <goals>
               <goal>add-source</goal>
@@ -522,18 +549,7 @@
             <configuration>
               <sources>
                 <source>${basedir}/target/jspc</source>
-              </sources>
-            </configuration>
-          </execution>
-          <execution>
-            <id>add-package-info</id>
-            <phase>generate-sources</phase>
-            <goals>
-              <goal>add-source</goal>
-            </goals>
-            <configuration>
-              <sources>
-                <source>${project.build.directory}/generated-sources</source>
+                <source>${project.build.directory}/generated-sources/java</source>
               </sources>
             </configuration>
           </execution>
@@ -587,7 +603,7 @@
     <compileSource>1.6</compileSource>
 
     <!-- Dependencies -->
-    <avro.version>1.4.1</avro.version>
+    <avro.version>1.5.3</avro.version>
     <commons-cli.version>1.2</commons-cli.version>
     <commons-codec.version>1.4</commons-codec.version>
     <commons-httpclient.version>3.1</commons-httpclient.version><!-- pretty outdated -->
@@ -715,6 +731,11 @@
       </exclusions>
     </dependency>
     <dependency>
+      <groupId>org.apache.avro</groupId>
+      <artifactId>avro-ipc</artifactId>
+      <version>${avro.version}</version>
+    </dependency>
+    <dependency>
       <groupId>org.apache.zookeeper</groupId>
       <artifactId>zookeeper</artifactId>
       <version>${zookeeper.version}</version>
diff --git a/src/main/avro/hbase.avpr b/src/main/avro/hbase.avpr
new file mode 100644
index 0000000..61208fd
--- /dev/null
+++ b/src/main/avro/hbase.avpr
@@ -0,0 +1,609 @@
+{
+  "protocol" : "HBase",
+  "namespace" : "org.apache.hadoop.hbase.avro.generated",
+  "types" : [ {
+    "type" : "record",
+    "name" : "AServerAddress",
+    "fields" : [ {
+      "name" : "hostname",
+      "type" : "string"
+    }, {
+      "name" : "inetSocketAddress",
+      "type" : "string"
+    }, {
+      "name" : "port",
+      "type" : "int"
+    } ]
+  }, {
+    "type" : "record",
+    "name" : "ARegionLoad",
+    "fields" : [ {
+      "name" : "memStoreSizeMB",
+      "type" : "int"
+    }, {
+      "name" : "name",
+      "type" : "bytes"
+    }, {
+      "name" : "storefileIndexSizeMB",
+      "type" : "int"
+    }, {
+      "name" : "storefiles",
+      "type" : "int"
+    }, {
+      "name" : "storefileSizeMB",
+      "type" : "int"
+    }, {
+      "name" : "stores",
+      "type" : "int"
+    } ]
+  }, {
+    "type" : "record",
+    "name" : "AServerLoad",
+    "fields" : [ {
+      "name" : "load",
+      "type" : "int"
+    }, {
+      "name" : "maxHeapMB",
+      "type" : "int"
+    }, {
+      "name" : "memStoreSizeInMB",
+      "type" : "int"
+    }, {
+      "name" : "numberOfRegions",
+      "type" : "int"
+    }, {
+      "name" : "numberOfRequests",
+      "type" : "int"
+    }, {
+      "name" : "regionsLoad",
+      "type" : {
+        "type" : "array",
+        "items" : "ARegionLoad"
+      }
+    }, {
+      "name" : "storefileIndexSizeInMB",
+      "type" : "int"
+    }, {
+      "name" : "storefiles",
+      "type" : "int"
+    }, {
+      "name" : "storefileSizeInMB",
+      "type" : "int"
+    }, {
+      "name" : "usedHeapMB",
+      "type" : "int"
+    } ]
+  }, {
+    "type" : "record",
+    "name" : "AServerInfo",
+    "fields" : [ {
+      "name" : "infoPort",
+      "type" : "int"
+    }, {
+      "name" : "load",
+      "type" : "AServerLoad"
+    }, {
+      "name" : "serverAddress",
+      "type" : "AServerAddress"
+    }, {
+      "name" : "serverName",
+      "type" : "string"
+    }, {
+      "name" : "startCode",
+      "type" : "long"
+    } ]
+  }, {
+    "type" : "record",
+    "name" : "AClusterStatus",
+    "fields" : [ {
+      "name" : "averageLoad",
+      "type" : "double"
+    }, {
+      "name" : "deadServerNames",
+      "type" : {
+        "type" : "array",
+        "items" : "string"
+      }
+    }, {
+      "name" : "deadServers",
+      "type" : "int"
+    }, {
+      "name" : "hbaseVersion",
+      "type" : "string"
+    }, {
+      "name" : "regionsCount",
+      "type" : "int"
+    }, {
+      "name" : "requestsCount",
+      "type" : "int"
+    }, {
+      "name" : "serverInfos",
+      "type" : {
+        "type" : "array",
+        "items" : "AServerInfo"
+      }
+    }, {
+      "name" : "servers",
+      "type" : "int"
+    } ]
+  }, {
+    "type" : "enum",
+    "name" : "ACompressionAlgorithm",
+    "symbols" : [ "LZO", "GZ", "NONE" ]
+  }, {
+    "type" : "record",
+    "name" : "AFamilyDescriptor",
+    "fields" : [ {
+      "name" : "name",
+      "type" : "bytes"
+    }, {
+      "name" : "compression",
+      "type" : [ "ACompressionAlgorithm", "null" ]
+    }, {
+      "name" : "maxVersions",
+      "type" : [ "int", "null" ]
+    }, {
+      "name" : "blocksize",
+      "type" : [ "int", "null" ]
+    }, {
+      "name" : "inMemory",
+      "type" : [ "boolean", "null" ]
+    }, {
+      "name" : "timeToLive",
+      "type" : [ "int", "null" ]
+    }, {
+      "name" : "blockCacheEnabled",
+      "type" : [ "boolean", "null" ]
+    } ]
+  }, {
+    "type" : "record",
+    "name" : "ATableDescriptor",
+    "fields" : [ {
+      "name" : "name",
+      "type" : "bytes"
+    }, {
+      "name" : "families",
+      "type" : [ {
+        "type" : "array",
+        "items" : "AFamilyDescriptor"
+      }, "null" ]
+    }, {
+      "name" : "maxFileSize",
+      "type" : [ "long", "null" ]
+    }, {
+      "name" : "memStoreFlushSize",
+      "type" : [ "long", "null" ]
+    }, {
+      "name" : "rootRegion",
+      "type" : [ "boolean", "null" ]
+    }, {
+      "name" : "metaRegion",
+      "type" : [ "boolean", "null" ]
+    }, {
+      "name" : "metaTable",
+      "type" : [ "boolean", "null" ]
+    }, {
+      "name" : "readOnly",
+      "type" : [ "boolean", "null" ]
+    }, {
+      "name" : "deferredLogFlush",
+      "type" : [ "boolean", "null" ]
+    } ]
+  }, {
+    "type" : "record",
+    "name" : "AColumn",
+    "fields" : [ {
+      "name" : "family",
+      "type" : "bytes"
+    }, {
+      "name" : "qualifier",
+      "type" : [ "bytes", "null" ]
+    } ]
+  }, {
+    "type" : "record",
+    "name" : "ATimeRange",
+    "fields" : [ {
+      "name" : "minStamp",
+      "type" : "long"
+    }, {
+      "name" : "maxStamp",
+      "type" : "long"
+    } ]
+  }, {
+    "type" : "record",
+    "name" : "AGet",
+    "fields" : [ {
+      "name" : "row",
+      "type" : "bytes"
+    }, {
+      "name" : "columns",
+      "type" : [ {
+        "type" : "array",
+        "items" : "AColumn"
+      }, "null" ]
+    }, {
+      "name" : "timestamp",
+      "type" : [ "long", "null" ]
+    }, {
+      "name" : "timerange",
+      "type" : [ "ATimeRange", "null" ]
+    }, {
+      "name" : "maxVersions",
+      "type" : [ "int", "null" ]
+    } ]
+  }, {
+    "type" : "record",
+    "name" : "AResultEntry",
+    "fields" : [ {
+      "name" : "family",
+      "type" : "bytes"
+    }, {
+      "name" : "qualifier",
+      "type" : "bytes"
+    }, {
+      "name" : "value",
+      "type" : "bytes"
+    }, {
+      "name" : "timestamp",
+      "type" : "long"
+    } ]
+  }, {
+    "type" : "record",
+    "name" : "AResult",
+    "fields" : [ {
+      "name" : "row",
+      "type" : "bytes"
+    }, {
+      "name" : "entries",
+      "type" : {
+        "type" : "array",
+        "items" : "AResultEntry"
+      }
+    } ]
+  }, {
+    "type" : "record",
+    "name" : "AColumnValue",
+    "fields" : [ {
+      "name" : "family",
+      "type" : "bytes"
+    }, {
+      "name" : "qualifier",
+      "type" : "bytes"
+    }, {
+      "name" : "value",
+      "type" : "bytes"
+    }, {
+      "name" : "timestamp",
+      "type" : [ "long", "null" ]
+    } ]
+  }, {
+    "type" : "record",
+    "name" : "APut",
+    "fields" : [ {
+      "name" : "row",
+      "type" : "bytes"
+    }, {
+      "name" : "columnValues",
+      "type" : {
+        "type" : "array",
+        "items" : "AColumnValue"
+      }
+    } ]
+  }, {
+    "type" : "record",
+    "name" : "ADelete",
+    "fields" : [ {
+      "name" : "row",
+      "type" : "bytes"
+    }, {
+      "name" : "columns",
+      "type" : [ {
+        "type" : "array",
+        "items" : "AColumn"
+      }, "null" ]
+    } ]
+  }, {
+    "type" : "record",
+    "name" : "AScan",
+    "fields" : [ {
+      "name" : "startRow",
+      "type" : [ "bytes", "null" ]
+    }, {
+      "name" : "stopRow",
+      "type" : [ "bytes", "null" ]
+    }, {
+      "name" : "columns",
+      "type" : [ {
+        "type" : "array",
+        "items" : "AColumn"
+      }, "null" ]
+    }, {
+      "name" : "timestamp",
+      "type" : [ "long", "null" ]
+    }, {
+      "name" : "timerange",
+      "type" : [ "ATimeRange", "null" ]
+    }, {
+      "name" : "maxVersions",
+      "type" : [ "int", "null" ]
+    } ]
+  }, {
+    "type" : "error",
+    "name" : "AIOError",
+    "fields" : [ {
+      "name" : "message",
+      "type" : "string"
+    } ]
+  }, {
+    "type" : "error",
+    "name" : "AIllegalArgument",
+    "fields" : [ {
+      "name" : "message",
+      "type" : "string"
+    } ]
+  }, {
+    "type" : "error",
+    "name" : "ATableExists",
+    "fields" : [ {
+      "name" : "message",
+      "type" : "string"
+    } ]
+  }, {
+    "type" : "error",
+    "name" : "AMasterNotRunning",
+    "fields" : [ {
+      "name" : "message",
+      "type" : "string"
+    } ]
+  } ],
+  "messages" : {
+    "getHBaseVersion" : {
+      "request" : [ ],
+      "response" : "string",
+      "errors" : [ "AIOError" ]
+    },
+    "getClusterStatus" : {
+      "request" : [ ],
+      "response" : "AClusterStatus",
+      "errors" : [ "AIOError" ]
+    },
+    "listTables" : {
+      "request" : [ ],
+      "response" : {
+        "type" : "array",
+        "items" : "ATableDescriptor"
+      },
+      "errors" : [ "AIOError" ]
+    },
+    "describeTable" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      } ],
+      "response" : "ATableDescriptor",
+      "errors" : [ "AIOError" ]
+    },
+    "isTableEnabled" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      } ],
+      "response" : "boolean",
+      "errors" : [ "AIOError" ]
+    },
+    "tableExists" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      } ],
+      "response" : "boolean",
+      "errors" : [ "AIOError" ]
+    },
+    "describeFamily" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      }, {
+        "name" : "family",
+        "type" : "bytes"
+      } ],
+      "response" : "AFamilyDescriptor",
+      "errors" : [ "AIOError" ]
+    },
+    "createTable" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "ATableDescriptor"
+      } ],
+      "response" : "null",
+      "errors" : [ "AIOError", "AIllegalArgument", "ATableExists", "AMasterNotRunning" ]
+    },
+    "deleteTable" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      } ],
+      "response" : "null",
+      "errors" : [ "AIOError" ]
+    },
+    "modifyTable" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      }, {
+        "name" : "tableDescriptor",
+        "type" : "ATableDescriptor"
+      } ],
+      "response" : "null",
+      "errors" : [ "AIOError" ]
+    },
+    "enableTable" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      } ],
+      "response" : "null",
+      "errors" : [ "AIOError" ]
+    },
+    "disableTable" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      } ],
+      "response" : "null",
+      "errors" : [ "AIOError" ]
+    },
+    "flush" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      } ],
+      "response" : "null",
+      "errors" : [ "AIOError" ]
+    },
+    "split" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      } ],
+      "response" : "null",
+      "errors" : [ "AIOError" ]
+    },
+    "addFamily" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      }, {
+        "name" : "family",
+        "type" : "AFamilyDescriptor"
+      } ],
+      "response" : "null",
+      "errors" : [ "AIOError" ]
+    },
+    "deleteFamily" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      }, {
+        "name" : "family",
+        "type" : "bytes"
+      } ],
+      "response" : "null",
+      "errors" : [ "AIOError" ]
+    },
+    "modifyFamily" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      }, {
+        "name" : "familyName",
+        "type" : "bytes"
+      }, {
+        "name" : "familyDescriptor",
+        "type" : "AFamilyDescriptor"
+      } ],
+      "response" : "null",
+      "errors" : [ "AIOError" ]
+    },
+    "get" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      }, {
+        "name" : "get",
+        "type" : "AGet"
+      } ],
+      "response" : "AResult",
+      "errors" : [ "AIOError" ]
+    },
+    "exists" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      }, {
+        "name" : "get",
+        "type" : "AGet"
+      } ],
+      "response" : "boolean",
+      "errors" : [ "AIOError" ]
+    },
+    "put" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      }, {
+        "name" : "put",
+        "type" : "APut"
+      } ],
+      "response" : "null",
+      "errors" : [ "AIOError" ]
+    },
+    "delete" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      }, {
+        "name" : "delete",
+        "type" : "ADelete"
+      } ],
+      "response" : "null",
+      "errors" : [ "AIOError" ]
+    },
+    "incrementColumnValue" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      }, {
+        "name" : "row",
+        "type" : "bytes"
+      }, {
+        "name" : "family",
+        "type" : "bytes"
+      }, {
+        "name" : "qualifier",
+        "type" : "bytes"
+      }, {
+        "name" : "amount",
+        "type" : "long"
+      }, {
+        "name" : "writeToWAL",
+        "type" : "boolean"
+      } ],
+      "response" : "long",
+      "errors" : [ "AIOError" ]
+    },
+    "scannerOpen" : {
+      "request" : [ {
+        "name" : "table",
+        "type" : "bytes"
+      }, {
+        "name" : "scan",
+        "type" : "AScan"
+      } ],
+      "response" : "int",
+      "errors" : [ "AIOError" ]
+    },
+    "scannerClose" : {
+      "request" : [ {
+        "name" : "scannerId",
+        "type" : "int"
+      } ],
+      "response" : "null",
+      "errors" : [ "AIOError", "AIllegalArgument" ]
+    },
+    "scannerGetRows" : {
+      "request" : [ {
+        "name" : "scannerId",
+        "type" : "int"
+      }, {
+        "name" : "numberOfRows",
+        "type" : "int"
+      } ],
+      "response" : {
+        "type" : "array",
+        "items" : "AResult"
+      },
+      "errors" : [ "AIOError", "AIllegalArgument" ]
+    }
+  }
+}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/AvroServer.java b/src/main/java/org/apache/hadoop/hbase/avro/AvroServer.java
index 569027a..16ff09d 100644
--- a/src/main/java/org/apache/hadoop/hbase/avro/AvroServer.java
+++ b/src/main/java/org/apache/hadoop/hbase/avro/AvroServer.java
@@ -26,7 +26,7 @@ import org.apache.avro.Schema;
 import org.apache.avro.generic.GenericArray;
 import org.apache.avro.generic.GenericData;
 import org.apache.avro.ipc.HttpServer;
-import org.apache.avro.specific.SpecificResponder;
+import org.apache.avro.ipc.specific.SpecificResponder;
 import org.apache.avro.util.Utf8;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AAlreadyExists.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AAlreadyExists.java
deleted file mode 100644
index 7f05f09..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AAlreadyExists.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AAlreadyExists extends org.apache.avro.specific.SpecificExceptionBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"error\",\"name\":\"AAlreadyExists\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"message\",\"type\":\"string\"}]}");
-  public org.apache.avro.util.Utf8 message;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return message;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: message = (org.apache.avro.util.Utf8)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AClusterStatus.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AClusterStatus.java
deleted file mode 100644
index 5abd81e..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AClusterStatus.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AClusterStatus extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"AClusterStatus\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"averageLoad\",\"type\":\"double\"},{\"name\":\"deadServerNames\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"deadServers\",\"type\":\"int\"},{\"name\":\"hbaseVersion\",\"type\":\"string\"},{\"name\":\"regionsCount\",\"type\":\"int\"},{\"name\":\"requestsCount\",\"type\":\"int\"},{\"name\":\"serverInfos\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AServerInfo\",\"fields\":[{\"name\":\"infoPort\",\"type\":\"int\"},{\"name\":\"load\",\"type\":{\"type\":\"record\",\"name\":\"AServerLoad\",\"fields\":[{\"name\":\"load\",\"type\":\"int\"},{\"name\":\"maxHeapMB\",\"type\":\"int\"},{\"name\":\"memStoreSizeInMB\",\"type\":\"int\"},{\"name\":\"numberOfRegions\",\"type\":\"int\"},{\"name\":\"numberOfRequests\",\"type\":\"int\"},{\"name\":\"regionsLoad\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ARegionLoad\",\"fields\":[{\"name\":\"memStoreSizeMB\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"bytes\"},{\"name\":\"storefileIndexSizeMB\",\"type\":\"int\"},{\"name\":\"storefiles\",\"type\":\"int\"},{\"name\":\"storefileSizeMB\",\"type\":\"int\"},{\"name\":\"stores\",\"type\":\"int\"}]}}},{\"name\":\"storefileIndexSizeInMB\",\"type\":\"int\"},{\"name\":\"storefiles\",\"type\":\"int\"},{\"name\":\"storefileSizeInMB\",\"type\":\"int\"},{\"name\":\"usedHeapMB\",\"type\":\"int\"}]}},{\"name\":\"serverAddress\",\"type\":{\"type\":\"record\",\"name\":\"AServerAddress\",\"fields\":[{\"name\":\"hostname\",\"type\":\"string\"},{\"name\":\"inetSocketAddress\",\"type\":\"string\"},{\"name\":\"port\",\"type\":\"int\"}]}},{\"name\":\"serverName\",\"type\":\"string\"},{\"name\":\"startCode\",\"type\":\"long\"}]}}},{\"name\":\"servers\",\"type\":\"int\"}]}");
-  public double averageLoad;
-  public java.util.List<java.lang.CharSequence> deadServerNames;
-  public int deadServers;
-  public java.lang.CharSequence hbaseVersion;
-  public int regionsCount;
-  public int requestsCount;
-  public java.util.List<org.apache.hadoop.hbase.avro.generated.AServerInfo> serverInfos;
-  public int servers;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return averageLoad;
-    case 1: return deadServerNames;
-    case 2: return deadServers;
-    case 3: return hbaseVersion;
-    case 4: return regionsCount;
-    case 5: return requestsCount;
-    case 6: return serverInfos;
-    case 7: return servers;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: averageLoad = (java.lang.Double)value$; break;
-    case 1: deadServerNames = (java.util.List<java.lang.CharSequence>)value$; break;
-    case 2: deadServers = (java.lang.Integer)value$; break;
-    case 3: hbaseVersion = (java.lang.CharSequence)value$; break;
-    case 4: regionsCount = (java.lang.Integer)value$; break;
-    case 5: requestsCount = (java.lang.Integer)value$; break;
-    case 6: serverInfos = (java.util.List<org.apache.hadoop.hbase.avro.generated.AServerInfo>)value$; break;
-    case 7: servers = (java.lang.Integer)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AColumn.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AColumn.java
deleted file mode 100644
index 3daf3ff..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AColumn.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AColumn extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"AColumn\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"family\",\"type\":\"bytes\"},{\"name\":\"qualifier\",\"type\":[\"bytes\",\"null\"]}]}");
-  public java.nio.ByteBuffer family;
-  public java.nio.ByteBuffer qualifier;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return family;
-    case 1: return qualifier;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: family = (java.nio.ByteBuffer)value$; break;
-    case 1: qualifier = (java.nio.ByteBuffer)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AColumnFamilyDescriptor.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AColumnFamilyDescriptor.java
deleted file mode 100644
index e5b14ef..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AColumnFamilyDescriptor.java
+++ /dev/null
@@ -1,42 +0,0 @@
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AColumnFamilyDescriptor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"AColumnFamilyDescriptor\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"name\",\"type\":\"bytes\"},{\"name\":\"compression\",\"type\":{\"type\":\"enum\",\"name\":\"ACompressionAlgorithm\",\"symbols\":[\"LZO\",\"GZ\",\"NONE\"]}},{\"name\":\"maxVersions\",\"type\":\"int\"},{\"name\":\"blocksize\",\"type\":\"int\"},{\"name\":\"inMemory\",\"type\":\"boolean\"},{\"name\":\"timeToLive\",\"type\":\"int\"},{\"name\":\"blockCacheEnabled\",\"type\":\"boolean\"},{\"name\":\"bloomfilterEnabled\",\"type\":\"boolean\"}]}");
-  public java.nio.ByteBuffer name;
-  public org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm compression;
-  public int maxVersions;
-  public int blocksize;
-  public boolean inMemory;
-  public int timeToLive;
-  public boolean blockCacheEnabled;
-  public boolean bloomfilterEnabled;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return name;
-    case 1: return compression;
-    case 2: return maxVersions;
-    case 3: return blocksize;
-    case 4: return inMemory;
-    case 5: return timeToLive;
-    case 6: return blockCacheEnabled;
-    case 7: return bloomfilterEnabled;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: name = (java.nio.ByteBuffer)value$; break;
-    case 1: compression = (org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm)value$; break;
-    case 2: maxVersions = (java.lang.Integer)value$; break;
-    case 3: blocksize = (java.lang.Integer)value$; break;
-    case 4: inMemory = (java.lang.Boolean)value$; break;
-    case 5: timeToLive = (java.lang.Integer)value$; break;
-    case 6: blockCacheEnabled = (java.lang.Boolean)value$; break;
-    case 7: bloomfilterEnabled = (java.lang.Boolean)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AColumnValue.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AColumnValue.java
deleted file mode 100644
index 1fcc5ac..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AColumnValue.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AColumnValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"AColumnValue\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"family\",\"type\":\"bytes\"},{\"name\":\"qualifier\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"timestamp\",\"type\":[\"long\",\"null\"]}]}");
-  public java.nio.ByteBuffer family;
-  public java.nio.ByteBuffer qualifier;
-  public java.nio.ByteBuffer value;
-  public java.lang.Long timestamp;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return family;
-    case 1: return qualifier;
-    case 2: return value;
-    case 3: return timestamp;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: family = (java.nio.ByteBuffer)value$; break;
-    case 1: qualifier = (java.nio.ByteBuffer)value$; break;
-    case 2: value = (java.nio.ByteBuffer)value$; break;
-    case 3: timestamp = (java.lang.Long)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/ACompressionAlgorithm.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/ACompressionAlgorithm.java
deleted file mode 100644
index b6c0a41..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/ACompressionAlgorithm.java
+++ /dev/null
@@ -1,11 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public enum ACompressionAlgorithm { 
-  LZO, GZ, NONE
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/ADelete.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/ADelete.java
deleted file mode 100644
index 377051b..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/ADelete.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class ADelete extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"ADelete\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"row\",\"type\":\"bytes\"},{\"name\":\"columns\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AColumn\",\"fields\":[{\"name\":\"family\",\"type\":\"bytes\"},{\"name\":\"qualifier\",\"type\":[\"bytes\",\"null\"]}]}},\"null\"]}]}");
-  public java.nio.ByteBuffer row;
-  public java.util.List<org.apache.hadoop.hbase.avro.generated.AColumn> columns;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return row;
-    case 1: return columns;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: row = (java.nio.ByteBuffer)value$; break;
-    case 1: columns = (java.util.List<org.apache.hadoop.hbase.avro.generated.AColumn>)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AFamilyDescriptor.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AFamilyDescriptor.java
deleted file mode 100644
index 573219b..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AFamilyDescriptor.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AFamilyDescriptor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"AFamilyDescriptor\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"name\",\"type\":\"bytes\"},{\"name\":\"compression\",\"type\":[{\"type\":\"enum\",\"name\":\"ACompressionAlgorithm\",\"symbols\":[\"LZO\",\"GZ\",\"NONE\"]},\"null\"]},{\"name\":\"maxVersions\",\"type\":[\"int\",\"null\"]},{\"name\":\"blocksize\",\"type\":[\"int\",\"null\"]},{\"name\":\"inMemory\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"timeToLive\",\"type\":[\"int\",\"null\"]},{\"name\":\"blockCacheEnabled\",\"type\":[\"boolean\",\"null\"]}]}");
-  public java.nio.ByteBuffer name;
-  public org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm compression;
-  public java.lang.Integer maxVersions;
-  public java.lang.Integer blocksize;
-  public java.lang.Boolean inMemory;
-  public java.lang.Integer timeToLive;
-  public java.lang.Boolean blockCacheEnabled;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return name;
-    case 1: return compression;
-    case 2: return maxVersions;
-    case 3: return blocksize;
-    case 4: return inMemory;
-    case 5: return timeToLive;
-    case 6: return blockCacheEnabled;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: name = (java.nio.ByteBuffer)value$; break;
-    case 1: compression = (org.apache.hadoop.hbase.avro.generated.ACompressionAlgorithm)value$; break;
-    case 2: maxVersions = (java.lang.Integer)value$; break;
-    case 3: blocksize = (java.lang.Integer)value$; break;
-    case 4: inMemory = (java.lang.Boolean)value$; break;
-    case 5: timeToLive = (java.lang.Integer)value$; break;
-    case 6: blockCacheEnabled = (java.lang.Boolean)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AGet.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AGet.java
deleted file mode 100644
index e69fa0e..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AGet.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AGet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"AGet\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"row\",\"type\":\"bytes\"},{\"name\":\"columns\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AColumn\",\"fields\":[{\"name\":\"family\",\"type\":\"bytes\"},{\"name\":\"qualifier\",\"type\":[\"bytes\",\"null\"]}]}},\"null\"]},{\"name\":\"timestamp\",\"type\":[\"long\",\"null\"]},{\"name\":\"timerange\",\"type\":[{\"type\":\"record\",\"name\":\"ATimeRange\",\"fields\":[{\"name\":\"minStamp\",\"type\":\"long\"},{\"name\":\"maxStamp\",\"type\":\"long\"}]},\"null\"]},{\"name\":\"maxVersions\",\"type\":[\"int\",\"null\"]}]}");
-  public java.nio.ByteBuffer row;
-  public java.util.List<org.apache.hadoop.hbase.avro.generated.AColumn> columns;
-  public java.lang.Long timestamp;
-  public org.apache.hadoop.hbase.avro.generated.ATimeRange timerange;
-  public java.lang.Integer maxVersions;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return row;
-    case 1: return columns;
-    case 2: return timestamp;
-    case 3: return timerange;
-    case 4: return maxVersions;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: row = (java.nio.ByteBuffer)value$; break;
-    case 1: columns = (java.util.List<org.apache.hadoop.hbase.avro.generated.AColumn>)value$; break;
-    case 2: timestamp = (java.lang.Long)value$; break;
-    case 3: timerange = (org.apache.hadoop.hbase.avro.generated.ATimeRange)value$; break;
-    case 4: maxVersions = (java.lang.Integer)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AIOError.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AIOError.java
deleted file mode 100644
index 16f1bec..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AIOError.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AIOError extends org.apache.avro.specific.SpecificExceptionBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"error\",\"name\":\"AIOError\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"message\",\"type\":\"string\"}]}");
-  public java.lang.CharSequence message;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return message;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: message = (java.lang.CharSequence)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AIllegalArgument.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AIllegalArgument.java
deleted file mode 100644
index 1275cb9..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AIllegalArgument.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AIllegalArgument extends org.apache.avro.specific.SpecificExceptionBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"error\",\"name\":\"AIllegalArgument\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"message\",\"type\":\"string\"}]}");
-  public java.lang.CharSequence message;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return message;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: message = (java.lang.CharSequence)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AMasterNotRunning.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AMasterNotRunning.java
deleted file mode 100644
index bbeb17c..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AMasterNotRunning.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AMasterNotRunning extends org.apache.avro.specific.SpecificExceptionBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"error\",\"name\":\"AMasterNotRunning\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"message\",\"type\":\"string\"}]}");
-  public java.lang.CharSequence message;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return message;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: message = (java.lang.CharSequence)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/APut.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/APut.java
deleted file mode 100644
index a725ec9..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/APut.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class APut extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"APut\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"row\",\"type\":\"bytes\"},{\"name\":\"columnValues\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AColumnValue\",\"fields\":[{\"name\":\"family\",\"type\":\"bytes\"},{\"name\":\"qualifier\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"timestamp\",\"type\":[\"long\",\"null\"]}]}}}]}");
-  public java.nio.ByteBuffer row;
-  public java.util.List<org.apache.hadoop.hbase.avro.generated.AColumnValue> columnValues;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return row;
-    case 1: return columnValues;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: row = (java.nio.ByteBuffer)value$; break;
-    case 1: columnValues = (java.util.List<org.apache.hadoop.hbase.avro.generated.AColumnValue>)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/ARegionLoad.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/ARegionLoad.java
deleted file mode 100644
index 6dde86a..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/ARegionLoad.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class ARegionLoad extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"ARegionLoad\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"memStoreSizeMB\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"bytes\"},{\"name\":\"storefileIndexSizeMB\",\"type\":\"int\"},{\"name\":\"storefiles\",\"type\":\"int\"},{\"name\":\"storefileSizeMB\",\"type\":\"int\"},{\"name\":\"stores\",\"type\":\"int\"}]}");
-  public int memStoreSizeMB;
-  public java.nio.ByteBuffer name;
-  public int storefileIndexSizeMB;
-  public int storefiles;
-  public int storefileSizeMB;
-  public int stores;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return memStoreSizeMB;
-    case 1: return name;
-    case 2: return storefileIndexSizeMB;
-    case 3: return storefiles;
-    case 4: return storefileSizeMB;
-    case 5: return stores;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: memStoreSizeMB = (java.lang.Integer)value$; break;
-    case 1: name = (java.nio.ByteBuffer)value$; break;
-    case 2: storefileIndexSizeMB = (java.lang.Integer)value$; break;
-    case 3: storefiles = (java.lang.Integer)value$; break;
-    case 4: storefileSizeMB = (java.lang.Integer)value$; break;
-    case 5: stores = (java.lang.Integer)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AResult.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AResult.java
deleted file mode 100644
index d5e8eca..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AResult.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"AResult\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"row\",\"type\":\"bytes\"},{\"name\":\"entries\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AResultEntry\",\"fields\":[{\"name\":\"family\",\"type\":\"bytes\"},{\"name\":\"qualifier\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"timestamp\",\"type\":\"long\"}]}}}]}");
-  public java.nio.ByteBuffer row;
-  public java.util.List<org.apache.hadoop.hbase.avro.generated.AResultEntry> entries;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return row;
-    case 1: return entries;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: row = (java.nio.ByteBuffer)value$; break;
-    case 1: entries = (java.util.List<org.apache.hadoop.hbase.avro.generated.AResultEntry>)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AResultEntry.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AResultEntry.java
deleted file mode 100644
index 703abb5..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AResultEntry.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AResultEntry extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"AResultEntry\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"family\",\"type\":\"bytes\"},{\"name\":\"qualifier\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"timestamp\",\"type\":\"long\"}]}");
-  public java.nio.ByteBuffer family;
-  public java.nio.ByteBuffer qualifier;
-  public java.nio.ByteBuffer value;
-  public long timestamp;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return family;
-    case 1: return qualifier;
-    case 2: return value;
-    case 3: return timestamp;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: family = (java.nio.ByteBuffer)value$; break;
-    case 1: qualifier = (java.nio.ByteBuffer)value$; break;
-    case 2: value = (java.nio.ByteBuffer)value$; break;
-    case 3: timestamp = (java.lang.Long)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AScan.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AScan.java
deleted file mode 100644
index 7a15f50..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AScan.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AScan extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"AScan\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"startRow\",\"type\":[\"bytes\",\"null\"]},{\"name\":\"stopRow\",\"type\":[\"bytes\",\"null\"]},{\"name\":\"columns\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AColumn\",\"fields\":[{\"name\":\"family\",\"type\":\"bytes\"},{\"name\":\"qualifier\",\"type\":[\"bytes\",\"null\"]}]}},\"null\"]},{\"name\":\"timestamp\",\"type\":[\"long\",\"null\"]},{\"name\":\"timerange\",\"type\":[{\"type\":\"record\",\"name\":\"ATimeRange\",\"fields\":[{\"name\":\"minStamp\",\"type\":\"long\"},{\"name\":\"maxStamp\",\"type\":\"long\"}]},\"null\"]},{\"name\":\"maxVersions\",\"type\":[\"int\",\"null\"]}]}");
-  public java.nio.ByteBuffer startRow;
-  public java.nio.ByteBuffer stopRow;
-  public java.util.List<org.apache.hadoop.hbase.avro.generated.AColumn> columns;
-  public java.lang.Long timestamp;
-  public org.apache.hadoop.hbase.avro.generated.ATimeRange timerange;
-  public java.lang.Integer maxVersions;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return startRow;
-    case 1: return stopRow;
-    case 2: return columns;
-    case 3: return timestamp;
-    case 4: return timerange;
-    case 5: return maxVersions;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: startRow = (java.nio.ByteBuffer)value$; break;
-    case 1: stopRow = (java.nio.ByteBuffer)value$; break;
-    case 2: columns = (java.util.List<org.apache.hadoop.hbase.avro.generated.AColumn>)value$; break;
-    case 3: timestamp = (java.lang.Long)value$; break;
-    case 4: timerange = (org.apache.hadoop.hbase.avro.generated.ATimeRange)value$; break;
-    case 5: maxVersions = (java.lang.Integer)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AServerAddress.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AServerAddress.java
deleted file mode 100644
index 198e85d..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AServerAddress.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AServerAddress extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"AServerAddress\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"hostname\",\"type\":\"string\"},{\"name\":\"inetSocketAddress\",\"type\":\"string\"},{\"name\":\"port\",\"type\":\"int\"}]}");
-  public java.lang.CharSequence hostname;
-  public java.lang.CharSequence inetSocketAddress;
-  public int port;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return hostname;
-    case 1: return inetSocketAddress;
-    case 2: return port;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: hostname = (java.lang.CharSequence)value$; break;
-    case 1: inetSocketAddress = (java.lang.CharSequence)value$; break;
-    case 2: port = (java.lang.Integer)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AServerInfo.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AServerInfo.java
deleted file mode 100644
index 8229bcc..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AServerInfo.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AServerInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"AServerInfo\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"infoPort\",\"type\":\"int\"},{\"name\":\"load\",\"type\":{\"type\":\"record\",\"name\":\"AServerLoad\",\"fields\":[{\"name\":\"load\",\"type\":\"int\"},{\"name\":\"maxHeapMB\",\"type\":\"int\"},{\"name\":\"memStoreSizeInMB\",\"type\":\"int\"},{\"name\":\"numberOfRegions\",\"type\":\"int\"},{\"name\":\"numberOfRequests\",\"type\":\"int\"},{\"name\":\"regionsLoad\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ARegionLoad\",\"fields\":[{\"name\":\"memStoreSizeMB\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"bytes\"},{\"name\":\"storefileIndexSizeMB\",\"type\":\"int\"},{\"name\":\"storefiles\",\"type\":\"int\"},{\"name\":\"storefileSizeMB\",\"type\":\"int\"},{\"name\":\"stores\",\"type\":\"int\"}]}}},{\"name\":\"storefileIndexSizeInMB\",\"type\":\"int\"},{\"name\":\"storefiles\",\"type\":\"int\"},{\"name\":\"storefileSizeInMB\",\"type\":\"int\"},{\"name\":\"usedHeapMB\",\"type\":\"int\"}]}},{\"name\":\"serverAddress\",\"type\":{\"type\":\"record\",\"name\":\"AServerAddress\",\"fields\":[{\"name\":\"hostname\",\"type\":\"string\"},{\"name\":\"inetSocketAddress\",\"type\":\"string\"},{\"name\":\"port\",\"type\":\"int\"}]}},{\"name\":\"serverName\",\"type\":\"string\"},{\"name\":\"startCode\",\"type\":\"long\"}]}");
-  public int infoPort;
-  public org.apache.hadoop.hbase.avro.generated.AServerLoad load;
-  public org.apache.hadoop.hbase.avro.generated.AServerAddress serverAddress;
-  public java.lang.CharSequence serverName;
-  public long startCode;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return infoPort;
-    case 1: return load;
-    case 2: return serverAddress;
-    case 3: return serverName;
-    case 4: return startCode;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: infoPort = (java.lang.Integer)value$; break;
-    case 1: load = (org.apache.hadoop.hbase.avro.generated.AServerLoad)value$; break;
-    case 2: serverAddress = (org.apache.hadoop.hbase.avro.generated.AServerAddress)value$; break;
-    case 3: serverName = (java.lang.CharSequence)value$; break;
-    case 4: startCode = (java.lang.Long)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/AServerLoad.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/AServerLoad.java
deleted file mode 100644
index b0d9c5b..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/AServerLoad.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class AServerLoad extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"AServerLoad\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"load\",\"type\":\"int\"},{\"name\":\"maxHeapMB\",\"type\":\"int\"},{\"name\":\"memStoreSizeInMB\",\"type\":\"int\"},{\"name\":\"numberOfRegions\",\"type\":\"int\"},{\"name\":\"numberOfRequests\",\"type\":\"int\"},{\"name\":\"regionsLoad\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ARegionLoad\",\"fields\":[{\"name\":\"memStoreSizeMB\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"bytes\"},{\"name\":\"storefileIndexSizeMB\",\"type\":\"int\"},{\"name\":\"storefiles\",\"type\":\"int\"},{\"name\":\"storefileSizeMB\",\"type\":\"int\"},{\"name\":\"stores\",\"type\":\"int\"}]}}},{\"name\":\"storefileIndexSizeInMB\",\"type\":\"int\"},{\"name\":\"storefiles\",\"type\":\"int\"},{\"name\":\"storefileSizeInMB\",\"type\":\"int\"},{\"name\":\"usedHeapMB\",\"type\":\"int\"}]}");
-  public int load;
-  public int maxHeapMB;
-  public int memStoreSizeInMB;
-  public int numberOfRegions;
-  public int numberOfRequests;
-  public java.util.List<org.apache.hadoop.hbase.avro.generated.ARegionLoad> regionsLoad;
-  public int storefileIndexSizeInMB;
-  public int storefiles;
-  public int storefileSizeInMB;
-  public int usedHeapMB;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return load;
-    case 1: return maxHeapMB;
-    case 2: return memStoreSizeInMB;
-    case 3: return numberOfRegions;
-    case 4: return numberOfRequests;
-    case 5: return regionsLoad;
-    case 6: return storefileIndexSizeInMB;
-    case 7: return storefiles;
-    case 8: return storefileSizeInMB;
-    case 9: return usedHeapMB;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: load = (java.lang.Integer)value$; break;
-    case 1: maxHeapMB = (java.lang.Integer)value$; break;
-    case 2: memStoreSizeInMB = (java.lang.Integer)value$; break;
-    case 3: numberOfRegions = (java.lang.Integer)value$; break;
-    case 4: numberOfRequests = (java.lang.Integer)value$; break;
-    case 5: regionsLoad = (java.util.List<org.apache.hadoop.hbase.avro.generated.ARegionLoad>)value$; break;
-    case 6: storefileIndexSizeInMB = (java.lang.Integer)value$; break;
-    case 7: storefiles = (java.lang.Integer)value$; break;
-    case 8: storefileSizeInMB = (java.lang.Integer)value$; break;
-    case 9: usedHeapMB = (java.lang.Integer)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/ATableDescriptor.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/ATableDescriptor.java
deleted file mode 100644
index 97a534c..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/ATableDescriptor.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class ATableDescriptor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"ATableDescriptor\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"name\",\"type\":\"bytes\"},{\"name\":\"families\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AFamilyDescriptor\",\"fields\":[{\"name\":\"name\",\"type\":\"bytes\"},{\"name\":\"compression\",\"type\":[{\"type\":\"enum\",\"name\":\"ACompressionAlgorithm\",\"symbols\":[\"LZO\",\"GZ\",\"NONE\"]},\"null\"]},{\"name\":\"maxVersions\",\"type\":[\"int\",\"null\"]},{\"name\":\"blocksize\",\"type\":[\"int\",\"null\"]},{\"name\":\"inMemory\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"timeToLive\",\"type\":[\"int\",\"null\"]},{\"name\":\"blockCacheEnabled\",\"type\":[\"boolean\",\"null\"]}]}},\"null\"]},{\"name\":\"maxFileSize\",\"type\":[\"long\",\"null\"]},{\"name\":\"memStoreFlushSize\",\"type\":[\"long\",\"null\"]},{\"name\":\"rootRegion\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"metaRegion\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"metaTable\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"readOnly\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"deferredLogFlush\",\"type\":[\"boolean\",\"null\"]}]}");
-  public java.nio.ByteBuffer name;
-  public java.util.List<org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor> families;
-  public java.lang.Long maxFileSize;
-  public java.lang.Long memStoreFlushSize;
-  public java.lang.Boolean rootRegion;
-  public java.lang.Boolean metaRegion;
-  public java.lang.Boolean metaTable;
-  public java.lang.Boolean readOnly;
-  public java.lang.Boolean deferredLogFlush;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return name;
-    case 1: return families;
-    case 2: return maxFileSize;
-    case 3: return memStoreFlushSize;
-    case 4: return rootRegion;
-    case 5: return metaRegion;
-    case 6: return metaTable;
-    case 7: return readOnly;
-    case 8: return deferredLogFlush;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: name = (java.nio.ByteBuffer)value$; break;
-    case 1: families = (java.util.List<org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor>)value$; break;
-    case 2: maxFileSize = (java.lang.Long)value$; break;
-    case 3: memStoreFlushSize = (java.lang.Long)value$; break;
-    case 4: rootRegion = (java.lang.Boolean)value$; break;
-    case 5: metaRegion = (java.lang.Boolean)value$; break;
-    case 6: metaTable = (java.lang.Boolean)value$; break;
-    case 7: readOnly = (java.lang.Boolean)value$; break;
-    case 8: deferredLogFlush = (java.lang.Boolean)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/ATableExists.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/ATableExists.java
deleted file mode 100644
index ac96c1c..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/ATableExists.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class ATableExists extends org.apache.avro.specific.SpecificExceptionBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"error\",\"name\":\"ATableExists\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"message\",\"type\":\"string\"}]}");
-  public java.lang.CharSequence message;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return message;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: message = (java.lang.CharSequence)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/ATimeRange.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/ATimeRange.java
deleted file mode 100644
index 61ee9ff..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/ATimeRange.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class ATimeRange extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"ATimeRange\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"minStamp\",\"type\":\"long\"},{\"name\":\"maxStamp\",\"type\":\"long\"}]}");
-  public long minStamp;
-  public long maxStamp;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  // Used by DatumWriter.  Applications should not call. 
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return minStamp;
-    case 1: return maxStamp;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  // Used by DatumReader.  Applications should not call. 
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: minStamp = (java.lang.Long)value$; break;
-    case 1: maxStamp = (java.lang.Long)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/HBase.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/HBase.java
deleted file mode 100644
index d2efc95..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/HBase.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/**
- * Autogenerated by Avro
- * 
- * DO NOT EDIT DIRECTLY
- */
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public interface HBase {
-  public static final org.apache.avro.Protocol PROTOCOL = org.apache.avro.Protocol.parse("{\"protocol\":\"HBase\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"types\":[{\"type\":\"record\",\"name\":\"AServerAddress\",\"fields\":[{\"name\":\"hostname\",\"type\":\"string\"},{\"name\":\"inetSocketAddress\",\"type\":\"string\"},{\"name\":\"port\",\"type\":\"int\"}]},{\"type\":\"record\",\"name\":\"ARegionLoad\",\"fields\":[{\"name\":\"memStoreSizeMB\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"bytes\"},{\"name\":\"storefileIndexSizeMB\",\"type\":\"int\"},{\"name\":\"storefiles\",\"type\":\"int\"},{\"name\":\"storefileSizeMB\",\"type\":\"int\"},{\"name\":\"stores\",\"type\":\"int\"}]},{\"type\":\"record\",\"name\":\"AServerLoad\",\"fields\":[{\"name\":\"load\",\"type\":\"int\"},{\"name\":\"maxHeapMB\",\"type\":\"int\"},{\"name\":\"memStoreSizeInMB\",\"type\":\"int\"},{\"name\":\"numberOfRegions\",\"type\":\"int\"},{\"name\":\"numberOfRequests\",\"type\":\"int\"},{\"name\":\"regionsLoad\",\"type\":{\"type\":\"array\",\"items\":\"ARegionLoad\"}},{\"name\":\"storefileIndexSizeInMB\",\"type\":\"int\"},{\"name\":\"storefiles\",\"type\":\"int\"},{\"name\":\"storefileSizeInMB\",\"type\":\"int\"},{\"name\":\"usedHeapMB\",\"type\":\"int\"}]},{\"type\":\"record\",\"name\":\"AServerInfo\",\"fields\":[{\"name\":\"infoPort\",\"type\":\"int\"},{\"name\":\"load\",\"type\":\"AServerLoad\"},{\"name\":\"serverAddress\",\"type\":\"AServerAddress\"},{\"name\":\"serverName\",\"type\":\"string\"},{\"name\":\"startCode\",\"type\":\"long\"}]},{\"type\":\"record\",\"name\":\"AClusterStatus\",\"fields\":[{\"name\":\"averageLoad\",\"type\":\"double\"},{\"name\":\"deadServerNames\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"deadServers\",\"type\":\"int\"},{\"name\":\"hbaseVersion\",\"type\":\"string\"},{\"name\":\"regionsCount\",\"type\":\"int\"},{\"name\":\"requestsCount\",\"type\":\"int\"},{\"name\":\"serverInfos\",\"type\":{\"type\":\"array\",\"items\":\"AServerInfo\"}},{\"name\":\"servers\",\"type\":\"int\"}]},{\"type\":\"enum\",\"name\":\"ACompressionAlgorithm\",\"symbols\":[\"LZO\",\"GZ\",\"NONE\"]},{\"type\":\"record\",\"name\":\"AFamilyDescriptor\",\"fields\":[{\"name\":\"name\",\"type\":\"bytes\"},{\"name\":\"compression\",\"type\":[\"ACompressionAlgorithm\",\"null\"]},{\"name\":\"maxVersions\",\"type\":[\"int\",\"null\"]},{\"name\":\"blocksize\",\"type\":[\"int\",\"null\"]},{\"name\":\"inMemory\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"timeToLive\",\"type\":[\"int\",\"null\"]},{\"name\":\"blockCacheEnabled\",\"type\":[\"boolean\",\"null\"]}]},{\"type\":\"record\",\"name\":\"ATableDescriptor\",\"fields\":[{\"name\":\"name\",\"type\":\"bytes\"},{\"name\":\"families\",\"type\":[{\"type\":\"array\",\"items\":\"AFamilyDescriptor\"},\"null\"]},{\"name\":\"maxFileSize\",\"type\":[\"long\",\"null\"]},{\"name\":\"memStoreFlushSize\",\"type\":[\"long\",\"null\"]},{\"name\":\"rootRegion\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"metaRegion\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"metaTable\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"readOnly\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"deferredLogFlush\",\"type\":[\"boolean\",\"null\"]}]},{\"type\":\"record\",\"name\":\"AColumn\",\"fields\":[{\"name\":\"family\",\"type\":\"bytes\"},{\"name\":\"qualifier\",\"type\":[\"bytes\",\"null\"]}]},{\"type\":\"record\",\"name\":\"ATimeRange\",\"fields\":[{\"name\":\"minStamp\",\"type\":\"long\"},{\"name\":\"maxStamp\",\"type\":\"long\"}]},{\"type\":\"record\",\"name\":\"AGet\",\"fields\":[{\"name\":\"row\",\"type\":\"bytes\"},{\"name\":\"columns\",\"type\":[{\"type\":\"array\",\"items\":\"AColumn\"},\"null\"]},{\"name\":\"timestamp\",\"type\":[\"long\",\"null\"]},{\"name\":\"timerange\",\"type\":[\"ATimeRange\",\"null\"]},{\"name\":\"maxVersions\",\"type\":[\"int\",\"null\"]}]},{\"type\":\"record\",\"name\":\"AResultEntry\",\"fields\":[{\"name\":\"family\",\"type\":\"bytes\"},{\"name\":\"qualifier\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"timestamp\",\"type\":\"long\"}]},{\"type\":\"record\",\"name\":\"AResult\",\"fields\":[{\"name\":\"row\",\"type\":\"bytes\"},{\"name\":\"entries\",\"type\":{\"type\":\"array\",\"items\":\"AResultEntry\"}}]},{\"type\":\"record\",\"name\":\"AColumnValue\",\"fields\":[{\"name\":\"family\",\"type\":\"bytes\"},{\"name\":\"qualifier\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"timestamp\",\"type\":[\"long\",\"null\"]}]},{\"type\":\"record\",\"name\":\"APut\",\"fields\":[{\"name\":\"row\",\"type\":\"bytes\"},{\"name\":\"columnValues\",\"type\":{\"type\":\"array\",\"items\":\"AColumnValue\"}}]},{\"type\":\"record\",\"name\":\"ADelete\",\"fields\":[{\"name\":\"row\",\"type\":\"bytes\"},{\"name\":\"columns\",\"type\":[{\"type\":\"array\",\"items\":\"AColumn\"},\"null\"]}]},{\"type\":\"record\",\"name\":\"AScan\",\"fields\":[{\"name\":\"startRow\",\"type\":[\"bytes\",\"null\"]},{\"name\":\"stopRow\",\"type\":[\"bytes\",\"null\"]},{\"name\":\"columns\",\"type\":[{\"type\":\"array\",\"items\":\"AColumn\"},\"null\"]},{\"name\":\"timestamp\",\"type\":[\"long\",\"null\"]},{\"name\":\"timerange\",\"type\":[\"ATimeRange\",\"null\"]},{\"name\":\"maxVersions\",\"type\":[\"int\",\"null\"]}]},{\"type\":\"error\",\"name\":\"AIOError\",\"fields\":[{\"name\":\"message\",\"type\":\"string\"}]},{\"type\":\"error\",\"name\":\"AIllegalArgument\",\"fields\":[{\"name\":\"message\",\"type\":\"string\"}]},{\"type\":\"error\",\"name\":\"ATableExists\",\"fields\":[{\"name\":\"message\",\"type\":\"string\"}]},{\"type\":\"error\",\"name\":\"AMasterNotRunning\",\"fields\":[{\"name\":\"message\",\"type\":\"string\"}]}],\"messages\":{\"getHBaseVersion\":{\"request\":[],\"response\":\"string\",\"errors\":[\"AIOError\"]},\"getClusterStatus\":{\"request\":[],\"response\":\"AClusterStatus\",\"errors\":[\"AIOError\"]},\"listTables\":{\"request\":[],\"response\":{\"type\":\"array\",\"items\":\"ATableDescriptor\"},\"errors\":[\"AIOError\"]},\"describeTable\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"}],\"response\":\"ATableDescriptor\",\"errors\":[\"AIOError\"]},\"isTableEnabled\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"}],\"response\":\"boolean\",\"errors\":[\"AIOError\"]},\"tableExists\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"}],\"response\":\"boolean\",\"errors\":[\"AIOError\"]},\"describeFamily\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"},{\"name\":\"family\",\"type\":\"bytes\"}],\"response\":\"AFamilyDescriptor\",\"errors\":[\"AIOError\"]},\"createTable\":{\"request\":[{\"name\":\"table\",\"type\":\"ATableDescriptor\"}],\"response\":\"null\",\"errors\":[\"AIOError\",\"AIllegalArgument\",\"ATableExists\",\"AMasterNotRunning\"]},\"deleteTable\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"}],\"response\":\"null\",\"errors\":[\"AIOError\"]},\"modifyTable\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"},{\"name\":\"tableDescriptor\",\"type\":\"ATableDescriptor\"}],\"response\":\"null\",\"errors\":[\"AIOError\"]},\"enableTable\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"}],\"response\":\"null\",\"errors\":[\"AIOError\"]},\"disableTable\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"}],\"response\":\"null\",\"errors\":[\"AIOError\"]},\"flush\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"}],\"response\":\"null\",\"errors\":[\"AIOError\"]},\"split\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"}],\"response\":\"null\",\"errors\":[\"AIOError\"]},\"addFamily\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"},{\"name\":\"family\",\"type\":\"AFamilyDescriptor\"}],\"response\":\"null\",\"errors\":[\"AIOError\"]},\"deleteFamily\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"},{\"name\":\"family\",\"type\":\"bytes\"}],\"response\":\"null\",\"errors\":[\"AIOError\"]},\"modifyFamily\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"},{\"name\":\"familyName\",\"type\":\"bytes\"},{\"name\":\"familyDescriptor\",\"type\":\"AFamilyDescriptor\"}],\"response\":\"null\",\"errors\":[\"AIOError\"]},\"get\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"},{\"name\":\"get\",\"type\":\"AGet\"}],\"response\":\"AResult\",\"errors\":[\"AIOError\"]},\"exists\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"},{\"name\":\"get\",\"type\":\"AGet\"}],\"response\":\"boolean\",\"errors\":[\"AIOError\"]},\"put\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"},{\"name\":\"put\",\"type\":\"APut\"}],\"response\":\"null\",\"errors\":[\"AIOError\"]},\"delete\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"},{\"name\":\"delete\",\"type\":\"ADelete\"}],\"response\":\"null\",\"errors\":[\"AIOError\"]},\"incrementColumnValue\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"},{\"name\":\"row\",\"type\":\"bytes\"},{\"name\":\"family\",\"type\":\"bytes\"},{\"name\":\"qualifier\",\"type\":\"bytes\"},{\"name\":\"amount\",\"type\":\"long\"},{\"name\":\"writeToWAL\",\"type\":\"boolean\"}],\"response\":\"long\",\"errors\":[\"AIOError\"]},\"scannerOpen\":{\"request\":[{\"name\":\"table\",\"type\":\"bytes\"},{\"name\":\"scan\",\"type\":\"AScan\"}],\"response\":\"int\",\"errors\":[\"AIOError\"]},\"scannerClose\":{\"request\":[{\"name\":\"scannerId\",\"type\":\"int\"}],\"response\":\"null\",\"errors\":[\"AIOError\",\"AIllegalArgument\"]},\"scannerGetRows\":{\"request\":[{\"name\":\"scannerId\",\"type\":\"int\"},{\"name\":\"numberOfRows\",\"type\":\"int\"}],\"response\":{\"type\":\"array\",\"items\":\"AResult\"},\"errors\":[\"AIOError\",\"AIllegalArgument\"]}}}");
-  java.lang.CharSequence getHBaseVersion() throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  org.apache.hadoop.hbase.avro.generated.AClusterStatus getClusterStatus() throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  java.util.List<org.apache.hadoop.hbase.avro.generated.ATableDescriptor> listTables() throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  org.apache.hadoop.hbase.avro.generated.ATableDescriptor describeTable(java.nio.ByteBuffer table) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  boolean isTableEnabled(java.nio.ByteBuffer table) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  boolean tableExists(java.nio.ByteBuffer table) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor describeFamily(java.nio.ByteBuffer table, java.nio.ByteBuffer family) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  java.lang.Void createTable(org.apache.hadoop.hbase.avro.generated.ATableDescriptor table) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError, org.apache.hadoop.hbase.avro.generated.AIllegalArgument, org.apache.hadoop.hbase.avro.generated.ATableExists, org.apache.hadoop.hbase.avro.generated.AMasterNotRunning;
-  java.lang.Void deleteTable(java.nio.ByteBuffer table) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  java.lang.Void modifyTable(java.nio.ByteBuffer table, org.apache.hadoop.hbase.avro.generated.ATableDescriptor tableDescriptor) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  java.lang.Void enableTable(java.nio.ByteBuffer table) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  java.lang.Void disableTable(java.nio.ByteBuffer table) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  java.lang.Void flush(java.nio.ByteBuffer table) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  java.lang.Void split(java.nio.ByteBuffer table) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  java.lang.Void addFamily(java.nio.ByteBuffer table, org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor family) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  java.lang.Void deleteFamily(java.nio.ByteBuffer table, java.nio.ByteBuffer family) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  java.lang.Void modifyFamily(java.nio.ByteBuffer table, java.nio.ByteBuffer familyName, org.apache.hadoop.hbase.avro.generated.AFamilyDescriptor familyDescriptor) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  org.apache.hadoop.hbase.avro.generated.AResult get(java.nio.ByteBuffer table, org.apache.hadoop.hbase.avro.generated.AGet get) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  boolean exists(java.nio.ByteBuffer table, org.apache.hadoop.hbase.avro.generated.AGet get) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  java.lang.Void put(java.nio.ByteBuffer table, org.apache.hadoop.hbase.avro.generated.APut put) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  java.lang.Void delete(java.nio.ByteBuffer table, org.apache.hadoop.hbase.avro.generated.ADelete delete) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  long incrementColumnValue(java.nio.ByteBuffer table, java.nio.ByteBuffer row, java.nio.ByteBuffer family, java.nio.ByteBuffer qualifier, long amount, boolean writeToWAL) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  int scannerOpen(java.nio.ByteBuffer table, org.apache.hadoop.hbase.avro.generated.AScan scan) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError;
-  java.lang.Void scannerClose(int scannerId) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError, org.apache.hadoop.hbase.avro.generated.AIllegalArgument;
-  java.util.List<org.apache.hadoop.hbase.avro.generated.AResult> scannerGetRows(int scannerId, int numberOfRows) throws org.apache.avro.ipc.AvroRemoteException, org.apache.hadoop.hbase.avro.generated.AIOError, org.apache.hadoop.hbase.avro.generated.AIllegalArgument;
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/IOError.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/IOError.java
deleted file mode 100644
index 55cfa95..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/IOError.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class IOError extends org.apache.avro.specific.SpecificExceptionBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"error\",\"name\":\"IOError\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"message\",\"type\":\"string\"}]}");
-  public org.apache.avro.util.Utf8 message;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return message;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: message = (org.apache.avro.util.Utf8)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/generated/TCell.java b/src/main/java/org/apache/hadoop/hbase/avro/generated/TCell.java
deleted file mode 100644
index 602873e..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/generated/TCell.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package org.apache.hadoop.hbase.avro.generated;
-
-@SuppressWarnings("all")
-public class TCell extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
-  public static final org.apache.avro.Schema SCHEMA$ = org.apache.avro.Schema.parse("{\"type\":\"record\",\"name\":\"TCell\",\"namespace\":\"org.apache.hadoop.hbase.avro.generated\",\"fields\":[{\"name\":\"value\",\"type\":\"bytes\"},{\"name\":\"timestamp\",\"type\":\"long\"}]}");
-  public java.nio.ByteBuffer value;
-  public long timestamp;
-  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
-  public java.lang.Object get(int field$) {
-    switch (field$) {
-    case 0: return value;
-    case 1: return timestamp;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-  @SuppressWarnings(value="unchecked")
-  public void put(int field$, java.lang.Object value$) {
-    switch (field$) {
-    case 0: value = (java.nio.ByteBuffer)value$; break;
-    case 1: timestamp = (java.lang.Long)value$; break;
-    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
-    }
-  }
-}
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/hbase.avpr b/src/main/java/org/apache/hadoop/hbase/avro/hbase.avpr
deleted file mode 100644
index 61208fd..0000000
--- a/src/main/java/org/apache/hadoop/hbase/avro/hbase.avpr
+++ /dev/null
@@ -1,609 +0,0 @@
-{
-  "protocol" : "HBase",
-  "namespace" : "org.apache.hadoop.hbase.avro.generated",
-  "types" : [ {
-    "type" : "record",
-    "name" : "AServerAddress",
-    "fields" : [ {
-      "name" : "hostname",
-      "type" : "string"
-    }, {
-      "name" : "inetSocketAddress",
-      "type" : "string"
-    }, {
-      "name" : "port",
-      "type" : "int"
-    } ]
-  }, {
-    "type" : "record",
-    "name" : "ARegionLoad",
-    "fields" : [ {
-      "name" : "memStoreSizeMB",
-      "type" : "int"
-    }, {
-      "name" : "name",
-      "type" : "bytes"
-    }, {
-      "name" : "storefileIndexSizeMB",
-      "type" : "int"
-    }, {
-      "name" : "storefiles",
-      "type" : "int"
-    }, {
-      "name" : "storefileSizeMB",
-      "type" : "int"
-    }, {
-      "name" : "stores",
-      "type" : "int"
-    } ]
-  }, {
-    "type" : "record",
-    "name" : "AServerLoad",
-    "fields" : [ {
-      "name" : "load",
-      "type" : "int"
-    }, {
-      "name" : "maxHeapMB",
-      "type" : "int"
-    }, {
-      "name" : "memStoreSizeInMB",
-      "type" : "int"
-    }, {
-      "name" : "numberOfRegions",
-      "type" : "int"
-    }, {
-      "name" : "numberOfRequests",
-      "type" : "int"
-    }, {
-      "name" : "regionsLoad",
-      "type" : {
-        "type" : "array",
-        "items" : "ARegionLoad"
-      }
-    }, {
-      "name" : "storefileIndexSizeInMB",
-      "type" : "int"
-    }, {
-      "name" : "storefiles",
-      "type" : "int"
-    }, {
-      "name" : "storefileSizeInMB",
-      "type" : "int"
-    }, {
-      "name" : "usedHeapMB",
-      "type" : "int"
-    } ]
-  }, {
-    "type" : "record",
-    "name" : "AServerInfo",
-    "fields" : [ {
-      "name" : "infoPort",
-      "type" : "int"
-    }, {
-      "name" : "load",
-      "type" : "AServerLoad"
-    }, {
-      "name" : "serverAddress",
-      "type" : "AServerAddress"
-    }, {
-      "name" : "serverName",
-      "type" : "string"
-    }, {
-      "name" : "startCode",
-      "type" : "long"
-    } ]
-  }, {
-    "type" : "record",
-    "name" : "AClusterStatus",
-    "fields" : [ {
-      "name" : "averageLoad",
-      "type" : "double"
-    }, {
-      "name" : "deadServerNames",
-      "type" : {
-        "type" : "array",
-        "items" : "string"
-      }
-    }, {
-      "name" : "deadServers",
-      "type" : "int"
-    }, {
-      "name" : "hbaseVersion",
-      "type" : "string"
-    }, {
-      "name" : "regionsCount",
-      "type" : "int"
-    }, {
-      "name" : "requestsCount",
-      "type" : "int"
-    }, {
-      "name" : "serverInfos",
-      "type" : {
-        "type" : "array",
-        "items" : "AServerInfo"
-      }
-    }, {
-      "name" : "servers",
-      "type" : "int"
-    } ]
-  }, {
-    "type" : "enum",
-    "name" : "ACompressionAlgorithm",
-    "symbols" : [ "LZO", "GZ", "NONE" ]
-  }, {
-    "type" : "record",
-    "name" : "AFamilyDescriptor",
-    "fields" : [ {
-      "name" : "name",
-      "type" : "bytes"
-    }, {
-      "name" : "compression",
-      "type" : [ "ACompressionAlgorithm", "null" ]
-    }, {
-      "name" : "maxVersions",
-      "type" : [ "int", "null" ]
-    }, {
-      "name" : "blocksize",
-      "type" : [ "int", "null" ]
-    }, {
-      "name" : "inMemory",
-      "type" : [ "boolean", "null" ]
-    }, {
-      "name" : "timeToLive",
-      "type" : [ "int", "null" ]
-    }, {
-      "name" : "blockCacheEnabled",
-      "type" : [ "boolean", "null" ]
-    } ]
-  }, {
-    "type" : "record",
-    "name" : "ATableDescriptor",
-    "fields" : [ {
-      "name" : "name",
-      "type" : "bytes"
-    }, {
-      "name" : "families",
-      "type" : [ {
-        "type" : "array",
-        "items" : "AFamilyDescriptor"
-      }, "null" ]
-    }, {
-      "name" : "maxFileSize",
-      "type" : [ "long", "null" ]
-    }, {
-      "name" : "memStoreFlushSize",
-      "type" : [ "long", "null" ]
-    }, {
-      "name" : "rootRegion",
-      "type" : [ "boolean", "null" ]
-    }, {
-      "name" : "metaRegion",
-      "type" : [ "boolean", "null" ]
-    }, {
-      "name" : "metaTable",
-      "type" : [ "boolean", "null" ]
-    }, {
-      "name" : "readOnly",
-      "type" : [ "boolean", "null" ]
-    }, {
-      "name" : "deferredLogFlush",
-      "type" : [ "boolean", "null" ]
-    } ]
-  }, {
-    "type" : "record",
-    "name" : "AColumn",
-    "fields" : [ {
-      "name" : "family",
-      "type" : "bytes"
-    }, {
-      "name" : "qualifier",
-      "type" : [ "bytes", "null" ]
-    } ]
-  }, {
-    "type" : "record",
-    "name" : "ATimeRange",
-    "fields" : [ {
-      "name" : "minStamp",
-      "type" : "long"
-    }, {
-      "name" : "maxStamp",
-      "type" : "long"
-    } ]
-  }, {
-    "type" : "record",
-    "name" : "AGet",
-    "fields" : [ {
-      "name" : "row",
-      "type" : "bytes"
-    }, {
-      "name" : "columns",
-      "type" : [ {
-        "type" : "array",
-        "items" : "AColumn"
-      }, "null" ]
-    }, {
-      "name" : "timestamp",
-      "type" : [ "long", "null" ]
-    }, {
-      "name" : "timerange",
-      "type" : [ "ATimeRange", "null" ]
-    }, {
-      "name" : "maxVersions",
-      "type" : [ "int", "null" ]
-    } ]
-  }, {
-    "type" : "record",
-    "name" : "AResultEntry",
-    "fields" : [ {
-      "name" : "family",
-      "type" : "bytes"
-    }, {
-      "name" : "qualifier",
-      "type" : "bytes"
-    }, {
-      "name" : "value",
-      "type" : "bytes"
-    }, {
-      "name" : "timestamp",
-      "type" : "long"
-    } ]
-  }, {
-    "type" : "record",
-    "name" : "AResult",
-    "fields" : [ {
-      "name" : "row",
-      "type" : "bytes"
-    }, {
-      "name" : "entries",
-      "type" : {
-        "type" : "array",
-        "items" : "AResultEntry"
-      }
-    } ]
-  }, {
-    "type" : "record",
-    "name" : "AColumnValue",
-    "fields" : [ {
-      "name" : "family",
-      "type" : "bytes"
-    }, {
-      "name" : "qualifier",
-      "type" : "bytes"
-    }, {
-      "name" : "value",
-      "type" : "bytes"
-    }, {
-      "name" : "timestamp",
-      "type" : [ "long", "null" ]
-    } ]
-  }, {
-    "type" : "record",
-    "name" : "APut",
-    "fields" : [ {
-      "name" : "row",
-      "type" : "bytes"
-    }, {
-      "name" : "columnValues",
-      "type" : {
-        "type" : "array",
-        "items" : "AColumnValue"
-      }
-    } ]
-  }, {
-    "type" : "record",
-    "name" : "ADelete",
-    "fields" : [ {
-      "name" : "row",
-      "type" : "bytes"
-    }, {
-      "name" : "columns",
-      "type" : [ {
-        "type" : "array",
-        "items" : "AColumn"
-      }, "null" ]
-    } ]
-  }, {
-    "type" : "record",
-    "name" : "AScan",
-    "fields" : [ {
-      "name" : "startRow",
-      "type" : [ "bytes", "null" ]
-    }, {
-      "name" : "stopRow",
-      "type" : [ "bytes", "null" ]
-    }, {
-      "name" : "columns",
-      "type" : [ {
-        "type" : "array",
-        "items" : "AColumn"
-      }, "null" ]
-    }, {
-      "name" : "timestamp",
-      "type" : [ "long", "null" ]
-    }, {
-      "name" : "timerange",
-      "type" : [ "ATimeRange", "null" ]
-    }, {
-      "name" : "maxVersions",
-      "type" : [ "int", "null" ]
-    } ]
-  }, {
-    "type" : "error",
-    "name" : "AIOError",
-    "fields" : [ {
-      "name" : "message",
-      "type" : "string"
-    } ]
-  }, {
-    "type" : "error",
-    "name" : "AIllegalArgument",
-    "fields" : [ {
-      "name" : "message",
-      "type" : "string"
-    } ]
-  }, {
-    "type" : "error",
-    "name" : "ATableExists",
-    "fields" : [ {
-      "name" : "message",
-      "type" : "string"
-    } ]
-  }, {
-    "type" : "error",
-    "name" : "AMasterNotRunning",
-    "fields" : [ {
-      "name" : "message",
-      "type" : "string"
-    } ]
-  } ],
-  "messages" : {
-    "getHBaseVersion" : {
-      "request" : [ ],
-      "response" : "string",
-      "errors" : [ "AIOError" ]
-    },
-    "getClusterStatus" : {
-      "request" : [ ],
-      "response" : "AClusterStatus",
-      "errors" : [ "AIOError" ]
-    },
-    "listTables" : {
-      "request" : [ ],
-      "response" : {
-        "type" : "array",
-        "items" : "ATableDescriptor"
-      },
-      "errors" : [ "AIOError" ]
-    },
-    "describeTable" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      } ],
-      "response" : "ATableDescriptor",
-      "errors" : [ "AIOError" ]
-    },
-    "isTableEnabled" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      } ],
-      "response" : "boolean",
-      "errors" : [ "AIOError" ]
-    },
-    "tableExists" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      } ],
-      "response" : "boolean",
-      "errors" : [ "AIOError" ]
-    },
-    "describeFamily" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      }, {
-        "name" : "family",
-        "type" : "bytes"
-      } ],
-      "response" : "AFamilyDescriptor",
-      "errors" : [ "AIOError" ]
-    },
-    "createTable" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "ATableDescriptor"
-      } ],
-      "response" : "null",
-      "errors" : [ "AIOError", "AIllegalArgument", "ATableExists", "AMasterNotRunning" ]
-    },
-    "deleteTable" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      } ],
-      "response" : "null",
-      "errors" : [ "AIOError" ]
-    },
-    "modifyTable" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      }, {
-        "name" : "tableDescriptor",
-        "type" : "ATableDescriptor"
-      } ],
-      "response" : "null",
-      "errors" : [ "AIOError" ]
-    },
-    "enableTable" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      } ],
-      "response" : "null",
-      "errors" : [ "AIOError" ]
-    },
-    "disableTable" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      } ],
-      "response" : "null",
-      "errors" : [ "AIOError" ]
-    },
-    "flush" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      } ],
-      "response" : "null",
-      "errors" : [ "AIOError" ]
-    },
-    "split" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      } ],
-      "response" : "null",
-      "errors" : [ "AIOError" ]
-    },
-    "addFamily" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      }, {
-        "name" : "family",
-        "type" : "AFamilyDescriptor"
-      } ],
-      "response" : "null",
-      "errors" : [ "AIOError" ]
-    },
-    "deleteFamily" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      }, {
-        "name" : "family",
-        "type" : "bytes"
-      } ],
-      "response" : "null",
-      "errors" : [ "AIOError" ]
-    },
-    "modifyFamily" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      }, {
-        "name" : "familyName",
-        "type" : "bytes"
-      }, {
-        "name" : "familyDescriptor",
-        "type" : "AFamilyDescriptor"
-      } ],
-      "response" : "null",
-      "errors" : [ "AIOError" ]
-    },
-    "get" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      }, {
-        "name" : "get",
-        "type" : "AGet"
-      } ],
-      "response" : "AResult",
-      "errors" : [ "AIOError" ]
-    },
-    "exists" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      }, {
-        "name" : "get",
-        "type" : "AGet"
-      } ],
-      "response" : "boolean",
-      "errors" : [ "AIOError" ]
-    },
-    "put" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      }, {
-        "name" : "put",
-        "type" : "APut"
-      } ],
-      "response" : "null",
-      "errors" : [ "AIOError" ]
-    },
-    "delete" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      }, {
-        "name" : "delete",
-        "type" : "ADelete"
-      } ],
-      "response" : "null",
-      "errors" : [ "AIOError" ]
-    },
-    "incrementColumnValue" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      }, {
-        "name" : "row",
-        "type" : "bytes"
-      }, {
-        "name" : "family",
-        "type" : "bytes"
-      }, {
-        "name" : "qualifier",
-        "type" : "bytes"
-      }, {
-        "name" : "amount",
-        "type" : "long"
-      }, {
-        "name" : "writeToWAL",
-        "type" : "boolean"
-      } ],
-      "response" : "long",
-      "errors" : [ "AIOError" ]
-    },
-    "scannerOpen" : {
-      "request" : [ {
-        "name" : "table",
-        "type" : "bytes"
-      }, {
-        "name" : "scan",
-        "type" : "AScan"
-      } ],
-      "response" : "int",
-      "errors" : [ "AIOError" ]
-    },
-    "scannerClose" : {
-      "request" : [ {
-        "name" : "scannerId",
-        "type" : "int"
-      } ],
-      "response" : "null",
-      "errors" : [ "AIOError", "AIllegalArgument" ]
-    },
-    "scannerGetRows" : {
-      "request" : [ {
-        "name" : "scannerId",
-        "type" : "int"
-      }, {
-        "name" : "numberOfRows",
-        "type" : "int"
-      } ],
-      "response" : {
-        "type" : "array",
-        "items" : "AResult"
-      },
-      "errors" : [ "AIOError", "AIllegalArgument" ]
-    }
-  }
-}
-- 
1.7.0.4


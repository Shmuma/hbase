From 00d86ac720c5cbe0d4dc8ed3867c607e5cdf4d4d Mon Sep 17 00:00:00 2001
From: Michael Stack <stack@apache.org>
Date: Mon, 14 Mar 2011 23:38:57 +0000
Subject: [PATCH 071/101] HBASE-3507 requests count per HRegion and rebalance command; part 1

git-svn-id: https://svn.apache.org/repos/asf/hbase/trunk@1081610 13f79535-47bb-0310-9956-ffa450edef68
---
 pom.xml                                            |    5 +++
 .../java/org/apache/hadoop/hbase/HServerLoad.java  |   31 ++++++++++++++++++--
 .../apache/hadoop/hbase/regionserver/HRegion.java  |   13 +++++++-
 .../hadoop/hbase/regionserver/HRegionServer.java   |    8 ++++-
 .../hbase/regionserver/SplitTransaction.java       |    1 +
 .../regionserver/metrics/RegionServerMetrics.java  |    8 +++++
 6 files changed, 60 insertions(+), 6 deletions(-)

diff --git a/pom.xml b/pom.xml
index 011d3bb..68a126c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -664,6 +664,11 @@
       <version>${commons-cli.version}</version>
     </dependency>
     <dependency>
+     <groupId>com.github.stephenc.high-scale-lib</groupId>
+     <artifactId>high-scale-lib</artifactId>
+     <version>1.1.1</version>
+    </dependency>
+    <dependency>
       <groupId>commons-codec</groupId>
       <artifactId>commons-codec</artifactId>
       <version>${commons-codec.version}</version>
diff --git a/src/main/java/org/apache/hadoop/hbase/HServerLoad.java b/src/main/java/org/apache/hadoop/hbase/HServerLoad.java
index efa7e0e..05ff4b9 100644
--- a/src/main/java/org/apache/hadoop/hbase/HServerLoad.java
+++ b/src/main/java/org/apache/hadoop/hbase/HServerLoad.java
@@ -65,6 +65,8 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
     private int memstoreSizeMB;
     /** the current total size of storefile indexes for the region, in MB */
     private int storefileIndexSizeMB;
+    /** the current total request made to region */
+    private long requestsCount;
 
     /**
      * Constructor, for Writable
@@ -80,16 +82,19 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
      * @param storefileSizeMB
      * @param memstoreSizeMB
      * @param storefileIndexSizeMB
+     * @param requestsCount
      */
     public RegionLoad(final byte[] name, final int stores,
         final int storefiles, final int storefileSizeMB,
-        final int memstoreSizeMB, final int storefileIndexSizeMB) {
+        final int memstoreSizeMB, final int storefileIndexSizeMB,
+        final long requestsCount) {
       this.name = name;
       this.stores = stores;
       this.storefiles = storefiles;
       this.storefileSizeMB = storefileSizeMB;
       this.memstoreSizeMB = memstoreSizeMB;
       this.storefileIndexSizeMB = storefileIndexSizeMB;
+      this.requestsCount = requestsCount;
     }
 
     // Getters
@@ -143,6 +148,13 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
       return storefileIndexSizeMB;
     }
 
+    /**
+     * @return the number of requests made to region
+     */
+    public long getRequestsCount() {
+      return requestsCount;
+    }
+
     // Setters
 
     /**
@@ -181,6 +193,13 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
       this.storefileIndexSizeMB = storefileIndexSizeMB;
     }
 
+    /**
+     * @param requestsCount the number of requests to region
+     */
+    public void setRequestsCount(long requestsCount) {
+      this.requestsCount = requestsCount;
+    }
+
     // Writable
     public void readFields(DataInput in) throws IOException {
       int namelen = in.readInt();
@@ -191,6 +210,7 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
       this.storefileSizeMB = in.readInt();
       this.memstoreSizeMB = in.readInt();
       this.storefileIndexSizeMB = in.readInt();
+      this.requestsCount = in.readLong();
     }
 
     public void write(DataOutput out) throws IOException {
@@ -201,6 +221,7 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
       out.writeInt(storefileSizeMB);
       out.writeInt(memstoreSizeMB);
       out.writeInt(storefileIndexSizeMB);
+      out.writeLong(requestsCount);
     }
 
     /**
@@ -218,6 +239,8 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
         Integer.valueOf(this.memstoreSizeMB));
       sb = Strings.appendKeyValue(sb, "storefileIndexSizeMB",
         Integer.valueOf(this.storefileIndexSizeMB));
+      sb = Strings.appendKeyValue(sb, "requestsCount",
+          Long.valueOf(this.requestsCount));
       return sb.toString();
     }
   }
@@ -452,14 +475,16 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
    * @param storefiles
    * @param memstoreSizeMB
    * @param storefileIndexSizeMB
+   * @param requestsCount
    * @deprecated Use {@link #addRegionInfo(RegionLoad)}
    */
   @Deprecated
   public void addRegionInfo(final byte[] name, final int stores,
       final int storefiles, final int storefileSizeMB,
-      final int memstoreSizeMB, final int storefileIndexSizeMB) {
+      final int memstoreSizeMB, final int storefileIndexSizeMB,
+      final long requestsCount) {
     this.regionLoad.add(new HServerLoad.RegionLoad(name, stores, storefiles,
-      storefileSizeMB, memstoreSizeMB, storefileIndexSizeMB));
+      storefileSizeMB, memstoreSizeMB, storefileIndexSizeMB, requestsCount));
   }
 
   // Writable
diff --git a/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
index 0879c7b..c8463f0 100644
--- a/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
+++ b/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
@@ -95,6 +95,8 @@ import org.apache.hadoop.io.MultipleIOException;
 import org.apache.hadoop.io.Writable;
 import org.apache.hadoop.util.StringUtils;
 
+import org.cliffc.high_scale_lib.Counter;
+
 import com.google.common.collect.Lists;
 
 /**
@@ -161,6 +163,8 @@ public class HRegion implements HeapSize { // , Writable{
 
   final AtomicLong memstoreSize = new AtomicLong(0);
 
+  final Counter requestsCount = new Counter();
+
   /**
    * The directory for the table this region is part of.
    * This directory contains the directory for this region.
@@ -453,6 +457,11 @@ public class HRegion implements HeapSize { // , Writable{
     return this.regionInfo;
   }
 
+  /** @return requestsCount for this region */
+  public long getRequestsCount() {
+    return this.requestsCount.get();
+  }
+
   /** @return true if region is closed */
   public boolean isClosed() {
     return this.closed.get();
@@ -3038,6 +3047,7 @@ public class HRegion implements HeapSize { // , Writable{
       listPaths(fs, newRegionDir);
     }
     HRegion dstRegion = HRegion.newHRegion(tableDir, log, fs, conf, newRegionInfo, null);
+    dstRegion.requestsCount.set(a.requestsCount.get() + b.requestsCount.get());
     dstRegion.initialize();
     dstRegion.compactStores();
     if (LOG.isDebugEnabled()) {
@@ -3433,7 +3443,7 @@ public class HRegion implements HeapSize { // , Writable{
       Bytes.SIZEOF_INT + // rowLockWaitDuration
       (2 * Bytes.SIZEOF_BOOLEAN) + // forceMajorCompaction, splitRequest 
       ClassSize.ARRAY + // splitPoint
-      (23 * ClassSize.REFERENCE));
+      (24 * ClassSize.REFERENCE));
 
   public static final long DEEP_OVERHEAD = FIXED_OVERHEAD +
       ClassSize.OBJECT + // closeLock
@@ -3592,6 +3602,7 @@ public class HRegion implements HeapSize { // , Writable{
       throw new NotServingRegionException(regionInfo.getRegionNameAsString() +
           " is closed");
     }
+    this.requestsCount.increment();
   }
 
   /**
diff --git a/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java b/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
index 17a393e..93de201 100644
--- a/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
+++ b/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
@@ -922,6 +922,7 @@ public class HRegionServer implements HRegionInterface, HBaseRPCErrorHandler,
     int storefileSizeMB = 0;
     int memstoreSizeMB = (int) (r.memstoreSize.get() / 1024 / 1024);
     int storefileIndexSizeMB = 0;
+    long requestsCount = r.requestsCount.get();
     synchronized (r.stores) {
       stores += r.stores.size();
       for (Store store : r.stores.values()) {
@@ -930,8 +931,8 @@ public class HRegionServer implements HRegionInterface, HBaseRPCErrorHandler,
         storefileIndexSizeMB += (int) (store.getStorefilesIndexSize() / 1024 / 1024);
       }
     }
-    return new HServerLoad.RegionLoad(name, stores, storefiles,
-        storefileSizeMB, memstoreSizeMB, storefileIndexSizeMB);
+    return new HServerLoad.RegionLoad(name,stores, storefiles,
+        storefileSizeMB, memstoreSizeMB, storefileIndexSizeMB, requestsCount);
   }
 
   /**
@@ -1188,10 +1189,12 @@ public class HRegionServer implements HRegionInterface, HBaseRPCErrorHandler,
     int stores = 0;
     int storefiles = 0;
     long memstoreSize = 0;
+    long requestsCount = 0;
     long storefileIndexSize = 0;
     for (Map.Entry<String, HRegion> e : this.onlineRegions.entrySet()) {
         HRegion r = e.getValue();
         memstoreSize += r.memstoreSize.get();
+        requestsCount += r.requestsCount.get();
         synchronized (r.stores) {
           stores += r.stores.size();
           for (Map.Entry<byte[], Store> ee : r.stores.entrySet()) {
@@ -1204,6 +1207,7 @@ public class HRegionServer implements HRegionInterface, HBaseRPCErrorHandler,
     this.metrics.stores.set(stores);
     this.metrics.storefiles.set(storefiles);
     this.metrics.memstoreSizeMB.set((int) (memstoreSize / (1024 * 1024)));
+    this.metrics.requestsCount.set(requestsCount);
     this.metrics.storefileIndexSizeMB
         .set((int) (storefileIndexSize / (1024 * 1024)));
     this.metrics.compactionQueueSize.set(compactSplitThread
diff --git a/src/main/java/org/apache/hadoop/hbase/regionserver/SplitTransaction.java b/src/main/java/org/apache/hadoop/hbase/regionserver/SplitTransaction.java
index 7f1f4a4..51b0f0c 100644
--- a/src/main/java/org/apache/hadoop/hbase/regionserver/SplitTransaction.java
+++ b/src/main/java/org/apache/hadoop/hbase/regionserver/SplitTransaction.java
@@ -568,6 +568,7 @@ class SplitTransaction {
     HRegion r = HRegion.newHRegion(this.parent.getTableDir(),
       this.parent.getLog(), fs, this.parent.getConf(),
       hri, flusher);
+    r.requestsCount.set(this.parent.getRequestsCount() / 2);
     HRegion.moveInitialFilesIntoPlace(fs, regionDir, r.getRegionDir());
     return r;
   }
diff --git a/src/main/java/org/apache/hadoop/hbase/regionserver/metrics/RegionServerMetrics.java b/src/main/java/org/apache/hadoop/hbase/regionserver/metrics/RegionServerMetrics.java
index e2adaa3..8a6394e 100644
--- a/src/main/java/org/apache/hadoop/hbase/regionserver/metrics/RegionServerMetrics.java
+++ b/src/main/java/org/apache/hadoop/hbase/regionserver/metrics/RegionServerMetrics.java
@@ -127,6 +127,11 @@ public class RegionServerMetrics implements Updater {
   public final MetricsIntValue storefiles = new MetricsIntValue("storefiles", registry);
 
   /**
+   * Count of requests
+   */
+  public final MetricsLongValue requestsCount = new MetricsLongValue("requestsCount", registry);
+
+  /**
    * Sum of all the storefile index sizes in this regionserver in MB
    */
   public final MetricsIntValue storefileIndexSizeMB =
@@ -242,6 +247,7 @@ public class RegionServerMetrics implements Updater {
       this.storefiles.pushMetric(this.metricsRecord);
       this.storefileIndexSizeMB.pushMetric(this.metricsRecord);
       this.memstoreSizeMB.pushMetric(this.metricsRecord);
+      this.requestsCount.pushMetric(this.metricsRecord);
       this.regions.pushMetric(this.metricsRecord);
       this.requests.pushMetric(this.metricsRecord);
       this.compactionQueueSize.pushMetric(this.metricsRecord);
@@ -331,6 +337,8 @@ public class RegionServerMetrics implements Updater {
       Integer.valueOf(this.storefileIndexSizeMB.get()));
     sb = Strings.appendKeyValue(sb, "memstoreSize",
       Integer.valueOf(this.memstoreSizeMB.get()));
+    sb = Strings.appendKeyValue(sb, "requestsCount",
+        Long.valueOf(this.requestsCount.get()));
     sb = Strings.appendKeyValue(sb, "compactionQueueSize",
       Integer.valueOf(this.compactionQueueSize.get()));
     sb = Strings.appendKeyValue(sb, "flushQueueSize",
-- 
1.7.0.4


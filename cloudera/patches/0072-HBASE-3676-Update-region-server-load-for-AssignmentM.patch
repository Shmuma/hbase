From 723bb871678b80a07b54e1766846cdc4657dffed Mon Sep 17 00:00:00 2001
From: Michael Stack <stack@apache.org>
Date: Mon, 21 Mar 2011 22:13:38 +0000
Subject: [PATCH 072/101] HBASE-3676 Update region server load for AssignmentManager through regionServerReport()

git-svn-id: https://svn.apache.org/repos/asf/hbase/trunk@1083992 13f79535-47bb-0310-9956-ffa450edef68
---
 .../java/org/apache/hadoop/hbase/HServerLoad.java  |   35 ++++++++++---------
 .../org/apache/hadoop/hbase/avro/AvroUtil.java     |    2 +-
 .../apache/hadoop/hbase/master/ServerManager.java  |   12 +++++++
 .../hbase/rest/StorageClusterStatusResource.java   |    2 +-
 4 files changed, 32 insertions(+), 19 deletions(-)

diff --git a/src/main/java/org/apache/hadoop/hbase/HServerLoad.java b/src/main/java/org/apache/hadoop/hbase/HServerLoad.java
index 05ff4b9..561a000 100644
--- a/src/main/java/org/apache/hadoop/hbase/HServerLoad.java
+++ b/src/main/java/org/apache/hadoop/hbase/HServerLoad.java
@@ -22,9 +22,9 @@ package org.apache.hadoop.hbase;
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Collections;
+import java.util.Map;
+import java.util.TreeMap;
 
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.Strings;
@@ -47,7 +47,7 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
   /** the maximum allowable size of the heap, in MB */
   private int maxHeapMB;
   /** per-region load metrics */
-  private ArrayList<RegionLoad> regionLoad = new ArrayList<RegionLoad>();
+  private Map<byte[], RegionLoad> regionLoad = new TreeMap<byte[], RegionLoad>(Bytes.BYTES_COMPARATOR);
 
   /**
    * Encapsulates per-region loading metrics.
@@ -86,8 +86,7 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
      */
     public RegionLoad(final byte[] name, final int stores,
         final int storefiles, final int storefileSizeMB,
-        final int memstoreSizeMB, final int storefileIndexSizeMB,
-        final long requestsCount) {
+        final int memstoreSizeMB, final int storefileIndexSizeMB,final long requestsCount) {
       this.name = name;
       this.stores = stores;
       this.storefiles = storefiles;
@@ -282,7 +281,9 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
    */
   public HServerLoad(final HServerLoad hsl) {
     this(hsl.numberOfRequests, hsl.usedHeapMB, hsl.maxHeapMB);
-    this.regionLoad.addAll(hsl.regionLoad);
+    for (Map.Entry<byte[], RegionLoad> e : hsl.regionLoad.entrySet()) {
+      this.regionLoad.put(e.getKey(), e.getValue());
+    }
   }
 
   /**
@@ -387,8 +388,8 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
   /**
    * @return region load metrics
    */
-  public Collection<RegionLoad> getRegionsLoad() {
-    return Collections.unmodifiableCollection(regionLoad);
+  public Map<byte[], RegionLoad> getRegionsLoad() {
+    return Collections.unmodifiableMap(regionLoad);
   }
 
   /**
@@ -396,7 +397,7 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
    */
   public int getStorefiles() {
     int count = 0;
-    for (RegionLoad info: regionLoad)
+    for (RegionLoad info: regionLoad.values())
     	count += info.getStorefiles();
     return count;
   }
@@ -406,7 +407,7 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
    */
   public int getStorefileSizeInMB() {
     int count = 0;
-    for (RegionLoad info: regionLoad)
+    for (RegionLoad info: regionLoad.values())
       count += info.getStorefileSizeMB();
     return count;
   }
@@ -416,7 +417,7 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
    */
   public int getMemStoreSizeInMB() {
     int count = 0;
-    for (RegionLoad info: regionLoad)
+    for (RegionLoad info: regionLoad.values())
     	count += info.getMemStoreSizeMB();
     return count;
   }
@@ -426,7 +427,7 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
    */
   public int getStorefileIndexSizeInMB() {
     int count = 0;
-    for (RegionLoad info: regionLoad)
+    for (RegionLoad info: regionLoad.values())
     	count += info.getStorefileIndexSizeMB();
     return count;
   }
@@ -466,7 +467,7 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
    */
   public void addRegionInfo(final HServerLoad.RegionLoad load) {
     this.numberOfRegions++;
-    this.regionLoad.add(load);
+    this.regionLoad.put(load.getName(), load);
   }
 
   /**
@@ -483,7 +484,7 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
       final int storefiles, final int storefileSizeMB,
       final int memstoreSizeMB, final int storefileIndexSizeMB,
       final long requestsCount) {
-    this.regionLoad.add(new HServerLoad.RegionLoad(name, stores, storefiles,
+    this.regionLoad.put(name, new HServerLoad.RegionLoad(name, stores, storefiles,
       storefileSizeMB, memstoreSizeMB, storefileIndexSizeMB, requestsCount));
   }
 
@@ -497,7 +498,7 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
     for (int i = 0; i < numberOfRegions; i++) {
       RegionLoad rl = new RegionLoad();
       rl.readFields(in);
-      regionLoad.add(rl);
+      regionLoad.put(rl.getName(), rl);
     }
   }
 
@@ -506,8 +507,8 @@ public class HServerLoad implements WritableComparable<HServerLoad> {
     out.writeInt(usedHeapMB);
     out.writeInt(maxHeapMB);
     out.writeInt(numberOfRegions);
-    for (int i = 0; i < numberOfRegions; i++)
-      regionLoad.get(i).write(out);
+    for (RegionLoad rl: regionLoad.values())
+      rl.write(out);
   }
 
   // Comparable
diff --git a/src/main/java/org/apache/hadoop/hbase/avro/AvroUtil.java b/src/main/java/org/apache/hadoop/hbase/avro/AvroUtil.java
index 14e8fa1..d7a1e67 100644
--- a/src/main/java/org/apache/hadoop/hbase/avro/AvroUtil.java
+++ b/src/main/java/org/apache/hadoop/hbase/avro/AvroUtil.java
@@ -93,7 +93,7 @@ public class AvroUtil {
     asl.numberOfRegions = hsl.getNumberOfRegions();
     asl.numberOfRequests = hsl.getNumberOfRequests();
 
-    Collection<HServerLoad.RegionLoad> regionLoads = hsl.getRegionsLoad();
+    Collection<HServerLoad.RegionLoad> regionLoads = hsl.getRegionsLoad().values();
     Schema s = Schema.createArray(ARegionLoad.SCHEMA$);
     GenericData.Array<ARegionLoad> aregionLoads = null;
     if (regionLoads != null) {
diff --git a/src/main/java/org/apache/hadoop/hbase/master/ServerManager.java b/src/main/java/org/apache/hadoop/hbase/master/ServerManager.java
index 014f56b..f8de951 100644
--- a/src/main/java/org/apache/hadoop/hbase/master/ServerManager.java
+++ b/src/main/java/org/apache/hadoop/hbase/master/ServerManager.java
@@ -368,6 +368,18 @@ public class ServerManager {
     // No more piggyback messages on heartbeats for other stuff
     return msgs;
   }
+  
+  /**
+   *  Make server load accessible to AssignmentManager
+   * @param serverName
+   * @return
+   * @throws HServerLoad if serverName is known
+   */
+  HServerLoad getLoad(String serverName) {
+    HServerInfo hsi = this.onlineServers.get(serverName);
+    if (hsi == null) return null;
+    return hsi.getLoad();
+  }
 
   /**
    * @param serverName
diff --git a/src/main/java/org/apache/hadoop/hbase/rest/StorageClusterStatusResource.java b/src/main/java/org/apache/hadoop/hbase/rest/StorageClusterStatusResource.java
index ad20ff3..59f26f6 100644
--- a/src/main/java/org/apache/hadoop/hbase/rest/StorageClusterStatusResource.java
+++ b/src/main/java/org/apache/hadoop/hbase/rest/StorageClusterStatusResource.java
@@ -80,7 +80,7 @@ public class StorageClusterStatusResource extends ResourceBase {
             info.getStartCode(), load.getUsedHeapMB(),
             load.getMaxHeapMB());
         node.setRequests(load.getNumberOfRequests());
-        for (HServerLoad.RegionLoad region: load.getRegionsLoad()) {
+        for (HServerLoad.RegionLoad region: load.getRegionsLoad().values()) {
           node.addRegion(region.getName(), region.getStores(),
             region.getStorefiles(), region.getStorefileSizeMB(),
             region.getMemStoreSizeMB(), region.getStorefileIndexSizeMB());
-- 
1.7.0.4

